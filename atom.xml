<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>炎忍的博客</title>
  
  <subtitle>同学习，共成长，不将就，不妥协！</subtitle>
  <link href="https://blog.imyan.ren/atom.xml" rel="self"/>
  
  <link href="https://blog.imyan.ren/"/>
  <updated>2023-01-09T05:44:09.470Z</updated>
  <id>https://blog.imyan.ren/</id>
  
  <author>
    <name>炎忍</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter 实现图片下划线的 TabBar</title>
    <link href="https://blog.imyan.ren/posts/51bf3ff2/"/>
    <id>https://blog.imyan.ren/posts/51bf3ff2/</id>
    <published>2021-08-26T06:44:49.000Z</published>
    <updated>2023-01-09T05:44:09.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近在公司写项目的时候遇到了要把 TabBar 的下划线改成图片样式的，但是官方组件似乎没有提供，在网上也搜不到相关的内容，很是苦恼。后来找到了 <a href="https://medium.com/swlh/flutter-custom-tab-indicator-for-tabbar-d72bbc6c9d0c">Flutter: Custom tab indicator for TabBar</a> 这篇文章，发现他自定义为圆形的方法很简洁，或许可以来<s>抄袭</s>借鉴一下。</p><h2 id="创建必须组件">创建必须组件</h2><p>首先创建一个 <code>custom_tabbar.dart</code> 来放我们自定义的 TabBar，这样方便复用，里面的代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTabBar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> CustomTabBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.tabs,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.imagePath,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.controller,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(tabs != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; tabs;</span><br><span class="line">  <span class="keyword">final</span> TabController controller;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> imagePath;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CustomTabBarrState createState() =&gt; _CustomTabBarState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CustomTabBarState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CustomTabBar</span>&gt; </span>&#123;</span><br><span class="line">  ui.Image _image;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    loadImage(widget.imagePath).then(</span><br><span class="line">          (value) =&gt; setState(</span><br><span class="line">            () &#123;</span><br><span class="line">          _image = value;</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TabBar(</span><br><span class="line">      tabs: widget.tabs,</span><br><span class="line">      controller: widget.controller,</span><br><span class="line">      indicator: ImageTabIndicator(image: _image),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 StatefulWidget 是因为获取到图片之后要刷新一下布局，不然里面的下划线都是空的了，<code>loadImage</code> 是一个从 Assets 获取图片转换到 Image 的方法，这是 <code>dart:ui</code> 包下面的，方法代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ui&#x27;</span> <span class="keyword">as</span> ui;</span><br><span class="line"></span><br><span class="line">Future&lt;ui.Image&gt; loadImage(<span class="built_in">String</span> path) <span class="keyword">async</span> &#123;</span><br><span class="line">  ByteData data = <span class="keyword">await</span> rootBundle.load(path);</span><br><span class="line">  ui.Codec codec = <span class="keyword">await</span> ui.instantiateImageCodec(data.buffer.asUint8List());</span><br><span class="line">  ui.FrameInfo fi = <span class="keyword">await</span> codec.getNextFrame();</span><br><span class="line">  <span class="keyword">return</span> fi.image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这是一个异步方法</p><h2 id="实现图片下划线">实现图片下划线</h2><p>刚才在 <code>custom_tabbar.dart</code> 看到了有一个 <code>ImageTabIndicator</code>，这就是要实现下划线的地方了，里面的代码也比较简单</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageTabIndicator</span> <span class="keyword">extends</span> <span class="title">Decoration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> BoxPainter _painter;</span><br><span class="line"></span><br><span class="line">  ImageTabIndicator(&#123;<span class="built_in">double</span> radius = <span class="number">10</span>, <span class="meta">@required</span> ui.Image image&#125;)</span><br><span class="line">      : _painter = _ImagePainter(radius, image);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  BoxPainter createBoxPainter([onChanged]) =&gt; _painter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ImagePainter</span> <span class="keyword">extends</span> <span class="title">BoxPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Paint _paint;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius;</span><br><span class="line">  <span class="keyword">final</span> ui.Image image;</span><br><span class="line"></span><br><span class="line">  _ImagePainter(<span class="keyword">this</span>.radius, <span class="keyword">this</span>.image)</span><br><span class="line">      : _paint = Paint()</span><br><span class="line">          ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">          ..strokeCap = StrokeCap.round;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Offset offset, ImageConfiguration cfg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (image != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> Offset imageOffset = offset +</span><br><span class="line">          Offset(cfg.size.width / <span class="number">2</span>, cfg.size.height / <span class="number">2</span> + image.height + <span class="number">2</span>);</span><br><span class="line">      paintImage(</span><br><span class="line">          canvas: canvas,</span><br><span class="line">          rect: Rect.fromCircle(center: imageOffset, radius: radius),</span><br><span class="line">          image: image,</span><br><span class="line">          fit: BoxFit.fitWidth);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没什么好说的，就是去画传进来的图片，不过这里的位置需要去自己调整。另外不能用 <code>Paint</code> 画，一定要用 <a href="https://api.flutter.dev/flutter/painting/paintImage.html"><code>paintImage</code></a> 来画,他有一个转换方法，使用 <code>Paint</code> 会变成背景。</p><p>17 行这个 <code>Paint</code> 的初始化说实话应该不存在了，但是我试着删除他之后绘制就没了，很奇怪我就留着了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近在公司写项目的时候遇到了要把 TabBar 的下划线改成图片样</summary>
      
    
    
    
    <category term="编程" scheme="https://blog.imyan.ren/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Flutter" scheme="https://blog.imyan.ren/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>在 Coding 上部署完美校园打卡</title>
    <link href="https://blog.imyan.ren/posts/eb6032e9/"/>
    <id>https://blog.imyan.ren/posts/eb6032e9/</id>
    <published>2021-01-16T12:39:18.000Z</published>
    <updated>2023-01-09T05:44:09.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="note info flat"><p>感谢 <a href="https://github.com/ReaJason">ReaJason</a> 大佬的 <a href="https://github.com/ReaJason/17wanxiaoCheckin-Actions">仓库</a></p></div><p>由于一些未知的原因，没法在 GitHub Action 上使用 <a href="https://github.com/ReaJason/17wanxiaoCheckin-Actions">https://github.com/ReaJason/17wanxiaoCheckin-Actions</a> 进行打卡了，本地部署还不如手动打，买服务器又太贵了，我就想能不能在 Coding 上来进行部署。</p><h2 id="创建项目和仓库">创建项目和仓库</h2><p>首先你要有个 Coding 账号，然后登陆进去，选择 <code>项目</code>-&gt;<code>创建项目</code>，选择第一项<img src="../../media/article_img/wanxiao_checkin/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpeg" alt="创建项目">名称和标识随意填写，这里填写 test。创建之后点击 <code>代码仓库</code>，选择 <code>新建代码仓库</code><img src="../../media/article_img/wanxiao_checkin/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.jpeg" alt="新建仓库"></p><h2 id="构建持续部署">构建持续部署</h2><p>选择 <code>导入外部仓库</code>，然后在 <code>Git 仓库 URL</code> 这一项填入 <code>https://github.com/ReaJason/17wanxiaoCheckin-Actions.git</code> 点击确认就可以导入了。<img src="../../media/article_img/wanxiao_checkin/%E5%AF%BC%E5%85%A5.jpeg" alt="导入">随后点击 <code>持续部署</code>-&gt;<code>构建节点</code>，选择 <code>创建构建计划</code>，然后拉到最下面选择 <code>自定义构建过程</code><img src="../../media/article_img/wanxiao_checkin/%E5%88%9B%E5%BB%BA%E6%9E%84%E5%BB%BA.jpeg" alt="创建构建"><img src="../../media/article_img/wanxiao_checkin/%E8%87%AA%E5%AE%9A%E4%B9%89.jpeg" alt="自定义">这里不用做更改，直接确定就好了<img src="../../media/article_img/wanxiao_checkin/%E7%A1%AE%E5%AE%9A.jpeg" alt="确定">点击切换到文本编辑器<img src="../../media/article_img/wanxiao_checkin/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.jpeg" alt="文本编辑器">然后使用下面的内容替换进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    docker &#123;</span><br><span class="line">      reuseNode true</span><br><span class="line">      registryUrl &#x27;https://coding-public-docker.pkg.coding.net&#x27;</span><br><span class="line">      image &#x27;public/docker/python:3.7&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#x27;检出&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([</span><br><span class="line">          $class: &#x27;GitSCM&#x27;,</span><br><span class="line">          branches: [[name: GIT_BUILD_REF]],</span><br><span class="line">          userRemoteConfigs: [[</span><br><span class="line">            url: GIT_REPO_URL,</span><br><span class="line">            credentialsId: CREDENTIALS_ID</span><br><span class="line">          ]]])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(&#x27;构建&#x27;) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">          archiveArtifacts(artifacts: &#x27;README.md&#x27;, fingerprint: true)</span><br><span class="line">          echo &#x27;部署环境&#x27;</span><br><span class="line">          sh &#x27;pip3 install requests pycryptodome&#x27;</span><br><span class="line">          sh &#x27;pip3 install pycryptodome&#x27;</span><br><span class="line">          echo &#x27;开始签到&#x27;</span><br><span class="line">          sh &#x27;&#x27;&#x27;python3.7 index.py &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;USERNAME&#125;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;PASSWORD&#125;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;SCKEY&#125;</span></span><br><span class="line">EOF&#x27;&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>切记在 <code>代码仓库</code>-&gt;<code>设置</code>-&gt;<code>同步信息</code> 去掉勾选 <code>开启自动同步</code> 然后保存，以免签到失效。</p></div><h2 id="后续设置">后续设置</h2><p>点击上面的保存后选择触发规则，点击定时触发这里添加一个规则<img src="../../media/article_img/wanxiao_checkin/%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91.jpeg" alt="定时触发"><img src="../../media/article_img/wanxiao_checkin/%E5%BB%BA%E8%AE%AE%E8%A7%84%E5%88%99.jpeg" alt="建议规则"></p><p>然后点击 <code>变量与缓存</code>，新建三个环境变量<img src="../../media/article_img/wanxiao_checkin/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpeg" alt="环境变量"></p><p><code>SCKEY</code>——Server 酱的 SCKEY<code>USERNAME</code>——完美校园的登录账号<code>PASSWORD</code>——完美校园的登录面</p><p>如果要多人打卡请参考 <a href="https://github.com/ReaJason/17wanxiaoCheckin-Actions">原文档</a></p><p>最后返回选择立即构建就可以测试了，成功的话微信会有推送</p><p><img src="../../media/article_img/wanxiao_checkin/%E6%B5%8B%E8%AF%95.jpeg" alt="测试"></p><h2 id="推送打卡结果到-QQ">推送打卡结果到 QQ</h2><p>打开 Qmsg酱的 <a href="https://qmsg.zendee.cn/">官网</a>，根据网站的指引登录账号等操作</p><blockquote><p>1.<a href="https://qmsg.zendee.cn/me.html">登录</a>Qmsg网站。<br>2.选择「Qmsg酱」小姐姐（有多个「Qmsg酱」小姐姐供您选择哦）。<br>3.添加需要接收消息的QQ号（每个QQ号都需要添加您选择的「Qmsg酱」为QQ好友）。<br>4.调用接口（<a href="https://qmsg.zendee.cn/api.html">查看接口文档</a>）发送GET或POST请求，就能在QQ里收到「Qmsg酱」给你发的消息。</p></blockquote><p>一定要记得添加 Qmsg酱好友！</p><p>打开控制台在 <code>KEY</code> 这里复制你的 key<img src="../../media/article_img/wanxiao_checkin/key.jpeg" alt="key"></p><p>然后返回仓库打开 <code>index.py</code> 这个文件，按下 <code>Ctrl + F</code> 搜索 <code>desp</code> 替换为 <code>msg</code>，如图所示<img src="../../media/article_img/wanxiao_checkin/%E6%9B%BF%E6%8D%A2.jpeg" alt="替换">最后把 316 行的 <code>send_url = f&quot;https://sc.ftqq.com/&#123;sckey&#125;.send&quot;</code> 改为 <code>send_url = f&quot;https://qmsg.zendee.cn/send/&#123;sckey&#125;&quot;</code> 就好了，记得修改环境变量的 <code>SCKEY</code>，快去运行测试一下吧。</p><div class="note warning flat"><p>322 行的 <code>for _ in range(3):</code> 改为 <code>for _ in range(1):</code> 可以避免多次推送，可能有未知问题。</p></div>]]></content>
    
    
    <summary type="html">&lt;del&gt;垃圾打卡&lt;/del&gt;</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="完美校园" scheme="https://blog.imyan.ren/tags/%E5%AE%8C%E7%BE%8E%E6%A0%A1%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>诡辩术</title>
    <link href="https://blog.imyan.ren/posts/sophistry/"/>
    <id>https://blog.imyan.ren/posts/sophistry/</id>
    <published>2020-11-30T05:46:13.000Z</published>
    <updated>2023-01-09T05:44:09.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- ![诉诸匿名权威](https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/1_%E8%AF%89%E8%AF%B8%E5%8C%BF%E5%90%8D%E6%9D%83%E5%A8%81.jpg) --><div class="note info flat"><p>来源 <a href="https://informationisbeautiful.net/visualizations/rhetological-fallacies/">Rhetological Fallacies – A list of Logical Fallacies &amp; Rhetorical Devices with examples — Information is Beautiful</a><br>更多参考 <a href="https://zh.wikipedia.org/wiki/%E8%AC%AC%E8%AA%A4%E5%88%97%E8%A1%A8">谬误列表 - 维基百科，自由的百科全书</a><br>图片打包下载 <a href="https://github.com/EndureBlaze/Sophistry">https://github.com/EndureBlaze/Sophistry</a><br><strong>部分</strong>小标题点击可以跳转 Wikipedia 查看详细解析 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Norm (philosophy) - Wikipedia](https://en.wikipedia.org/wiki/Norm_(philosophy))">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分类:非形式谬误 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/Category:%E9%9D%9E%E5%BD%A2%E5%BC%8F%E8%AC%AC%E8%AA%A4)">[2]</span></a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分类:谬误 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/Category:%E8%AC%AC%E8%AA%A4)">[3]</span></a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[诡辩 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%A9%AD%E8%BE%AF)">[4]</span></a></sup></p></div><h2 id="“晓之以理”">“晓之以理”</h2><h3 id="诉诸匿名权威"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E6%AC%8A%E5%A8%81">诉诸匿名权威</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/1_%E8%AF%89%E8%AF%B8%E5%8C%BF%E5%90%8D%E6%9D%83%E5%A8%81.jpg" alt="诉诸匿名权威"></p><blockquote><p><strong>引用来源不详的“ 砖家”、“研究”或某一群体（比如“科学家”）以声称某观点是正确的。</strong><br><em>“他们说要花7年才能消化一片口香糖。”</em></p></blockquote><h3 id="诉诸（可疑）权威">诉诸（可疑）权威</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/2_%E8%AF%89%E8%AF%B8(%E5%8F%AF%E7%96%91)%E6%9D%83%E5%A8%81.jpg" alt="诉诸（可疑）权威"></p><blockquote><p><strong>因为某个无实无信的“专家”说某件事是真的，因而断言确实如此。</strong><br><em>“超过400位杰出的科学家与工程师对全球变暖持争议态度。”</em></p></blockquote><h3 id="诉诸常规">诉诸常规</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/3_%E8%AF%89%E8%AF%B8%E5%B8%B8%E8%A7%84.jpg" alt="诉诸常规"></p><blockquote><p><strong>因为常见，所以正确。</strong><br><em>“这家银行有些贪污腐败方面的问题。但在这里发生的事不是在哪家银行都在发生嘛。”</em></p></blockquote><h3 id="诉诸无知"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E7%84%A1%E7%9F%A5">诉诸无知</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/4_%E8%AF%89%E8%AF%B8%E6%97%A0%E7%9F%A5.jpg" alt="诉诸无知"></p><blockquote><p><strong>某一观点是正确的，仅仅因为它没有被证伪（或某观点是错误的，仅仅因为它尚未被证实）</strong><br><em>“没人能证明有上帝。所以没有上帝。”</em></p></blockquote><h3 id="诉诸怀疑">诉诸怀疑</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/5_%E8%AF%89%E8%AF%B8%E6%80%80%E7%96%91.jpg" alt="诉诸怀疑"></p><blockquote><p><strong>因为某件事听起来不可信，所以一定不是真的。</strong><br><em>“眼睛是超级复杂的生物机械之作，有千万个紧密联系的部件。如果没有一位睿智的设计师，这怎么可能存在？”</em></p></blockquote><h3 id="身价逻辑">身价逻辑</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/6_%E8%BA%AB%E4%BB%B7%E9%80%BB%E8%BE%91.jpg" alt="身价逻辑"></p><blockquote><p><strong>如果某人很有钱，或者某样东西很贵，那么这就对某一论断的真实性造成了影响。</strong><br><em>“如果这玩意儿更贵的话，那它一定更好。”</em></p></blockquote><h3 id="求新逻辑">求新逻辑</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/7_%E6%B1%82%E6%96%B0%E9%80%BB%E8%BE%91.jpg" alt="求新逻辑"></p><blockquote><p><strong>因为是最新的，所以更好。</strong><br><em>“太棒了！最新的操作系统会让我的电脑跑得更快的…”</em></p></blockquote><h3 id="诉诸主流">诉诸主流</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/8_%E8%AF%89%E8%AF%B8%E4%B8%BB%E6%B5%81.jpg" alt="诉诸主流"></p><blockquote><p><strong>认定某件事是真的，因为大多数人都这么相信。</strong><br><em>“喝牛奶能使你骨骼强健。”</em></p></blockquote><h3 id="诉诸概率">诉诸概率</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/9_%E8%AF%89%E8%AF%B8%E6%A6%82%E7%8E%87.jpg" alt="诉诸概率"></p><blockquote><p><strong>相信因为某件事情可能发生，所以必然会发生。</strong><br><em>“宇宙里有数不清的星系，无数多的星星。一定有另一颗行星孕育了智慧生命。”</em></p></blockquote><h3 id="诉诸传统">诉诸传统</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/10_%E8%AF%89%E8%AF%B8%E4%BC%A0%E7%BB%9F.jpg" alt="诉诸传统"></p><blockquote><p><strong>声称某件事是正确的，因为（很显然）一直以来都是这样。</strong><br><em>“婚姻是男与女的结合。因此同性婚姻毫无根据。”</em></p></blockquote><h2 id="“动之以情”">“动之以情”</h2><h3 id="掩耳盗铃"><a href="https://zh.wikipedia.org/wiki/%E6%8E%A9%E8%80%B3%E7%9B%9C%E9%88%B4%E8%AC%AC%E8%AA%A4">掩耳盗铃</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/11_%E6%8E%A9%E8%80%B3%E7%9B%97%E9%93%83.jpg" alt="掩耳盗铃"></p><blockquote><p><strong>声称某个观点是错误的，因为你不愿意相信那所意味的事实。</strong><br><em>“他不可能就是为了骗我的钱。他说过他爱我的，他一定是遭到了什么变故。”</em></p></blockquote><h3 id="诉诸恐惧"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E6%81%90%E6%87%BC">诉诸恐惧</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/12_%E8%AF%89%E8%AF%B8%E6%81%90%E6%83%A7.jpg" alt="诉诸恐惧"></p><blockquote><p><strong>煽动对一方的恐惧与偏见，从而进行论证。</strong><br><em>“在你意识到之前，清真寺的数目就会超过教堂了。”</em></p></blockquote><h3 id="诉诸谄媚"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E8%AB%82%E5%AA%9A">诉诸谄媚</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/13_%E8%AF%89%E8%B0%84%E5%AA%9A.jpg" alt="诉诸谄媚"></p><blockquote><p><strong>给毫无根据的论点裹上糖衣炮弹，让人不自觉地全盘接受。</strong><br><em>“聪明又有洞察力的读者当然在读到这样的谬误时就能马上发觉。”</em></p></blockquote><h3 id="诉诸自然"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E8%87%AA%E7%84%B6">诉诸自然</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/14_%E8%AF%89%E8%AF%B8%E8%87%AA%E7%84%B6.jpg" alt="诉诸自然"></p><blockquote><p><strong>通过与“至善”的自然界的对比，来使你的观点看起来更站得住脚。</strong><br><em>“同性恋当然违背天性。你看不到同性动物交配吧。”</em></p></blockquote><h3 id="诉诸同情"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E6%86%90%E6%86%AB">诉诸同情</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/15_%E8%AF%89%E8%AF%B8%E5%90%8C%E6%83%85.jpg" alt="诉诸同情"></p><blockquote><p><strong>唤起人们的怜悯之心，以动摇对手。</strong><br><em>“前独裁者已垂垂老矣，濒临末年。让他为这些指控接受审判实在不应该。”</em></p></blockquote><h3 id="诉诸荒谬"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E8%8D%92%E8%AC%AC">诉诸荒谬</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/16_%E8%AF%89%E8%AF%B8%E8%8D%92%E8%B0%AC.jpg" alt="诉诸荒谬"></p><blockquote><p><strong>将对手的观点以荒谬的形式表现出来以进行打击。</strong><br><em>“对上帝的忠诚就如同相信有圣诞老人和牙仙一样。”</em></p></blockquote><h3 id="诉诸仇恨"><a href="https://zh.wikipedia.org/wiki/%E8%A8%B4%E8%AB%B8%E4%BB%87%E6%81%A8">诉诸仇恨</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/17_%E8%AF%89%E8%AF%B8%E4%BB%87%E6%81%A8.jpg" alt="诉诸仇恨"></p><blockquote><p><strong>因为个人偏见而对某一看法不屑一顾。</strong><br><em>“富二代搞慈善？算了吧，反正还不是在做秀。”</em></p></blockquote><h3 id="一厢情愿"><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E5%BB%82%E6%83%85%E9%A1%98">一厢情愿</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/18_%E4%B8%80%E5%8E%A2%E6%83%85%E6%84%BF.jpg" alt="一厢情愿"></p><blockquote><p><strong>认为一件事是真的或假的，仅仅因为你情愿想当然。</strong><br><em>“主席是不会犯错的。他是人民的领袖，红旗的舵手。”</em></p></blockquote><h2 id="错误推论">错误推论</h2><h3 id="轶事证据"><a href="https://zh.wikipedia.org/wiki/%E8%BB%BC%E4%BA%8B%E8%AD%89%E6%93%9A">轶事证据</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/19_%E8%BD%B6%E4%BA%8B%E8%AF%81%E6%8D%AE.jpg" alt="轶事证据"></p><blockquote><p><strong>对系统性研究下得出的证据视而不见，反而集中在手头的个例上。</strong><br><em>“我才不戒烟呢。我爷爷每天抽40根，还活到了90岁！”</em></p></blockquote><h3 id="合成谬误"><a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%88%90_(%E8%AC%AC%E8%AA%A4)">合成谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/20_%E5%90%88%E6%88%90%E8%B0%AC%E8%AF%AF.jpg" alt="合成谬误"></p><blockquote><p><strong>推断一群人的特性或信条也代表了整个团体。</strong><br><em>“最近的恐怖袭击是由激进的伊斯兰教徒组织的。因此所有的恐怖分子都是穆斯林。”</em></p></blockquote><h3 id="分割谬误"><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%89%B2%E8%AC%AC%E8%AA%A4">分割谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/21_%E5%88%86%E5%89%B2%E8%B0%AC%E8%AF%AF.jpg" alt="分割谬误"></p><blockquote><p><strong>将整个团体的特性或信条自动代入到每一名成员的头上。</strong><br><em>“苹果的产品向来颠覆传统，设计一流。下一款也一定如此。”</em></p></blockquote><h3 id="设计谬误">设计谬误</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/21_%E5%88%86%E5%89%B2%E8%B0%AC%E8%AF%AF.jpg" alt="设计谬误"></p><blockquote><p><strong>因为某样东西设计精美，视效上佳，所以更加站得住脚。</strong><br><em>“呃…”</em></p></blockquote><h3 id="赌徒谬误"><a href="https://zh.wikipedia.org/wiki/%E8%B3%AD%E5%BE%92%E8%AC%AC%E8%AA%A4">赌徒谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/23_%E8%B5%8C%E5%BE%92%E8%B0%AC%E8%AF%AF.jpg" alt="赌徒谬误"></p><blockquote><p><strong>认为历史结果会影响未来结果。</strong><br><em>“我已连续丢了10次硬币，都是正面朝上。因此下一次更可能丢出反面来。”</em></p></blockquote><h3 id="轻率概化"><a href="https://zh.wikipedia.org/wiki/%E8%8D%89%E7%8E%87%E6%AD%B8%E7%B4%8D">轻率概化</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/24_%E8%BD%BB%E7%8E%87%E6%A6%82%E5%8C%96.jpg" alt="轻率概化"></p><blockquote><p><strong>从单一的样本得出概括性的结论。</strong><br><em>“我被前面的女驾驶别了下。女人就是不能开车。”</em></p></blockquote><h3 id="妄下定论">妄下定论</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/25_%E5%A6%84%E4%B8%8B%E5%AE%9A%E8%AE%BA.jpg" alt="妄下定论"></p><blockquote><p><strong>没有公平考虑所有相关（且易举证的）事实，就妄下结论。</strong><br><em>“她想要医疗保险报销避孕药？真是个婊子。”</em></p></blockquote><h3 id="中间立场">中间立场</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/26_%E4%B8%AD%E9%97%B4%E7%AB%8B%E5%9C%BA.jpg" alt="中间立场"></p><blockquote><p><strong>相冲突的两个观点似乎都有道理，那么答案一定在两者的中间地带。</strong><br><em>“我追尾了你的车，但我不认为自己该出修理费。你认为我该出所有的修理费。合乎情理的方案就是平分费用。”</em></p></blockquote><h3 id="完美主义谬误"><a href="https://zh.wikipedia.org/wiki/%E6%B6%85%E6%A7%83%E8%AC%AC%E8%AA%A4">完美主义谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/27_%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%B0%AC%E8%AF%AF.jpg" alt="完美主义谬误"></p><blockquote><p><strong>认为只有完美的成功才是可行的选择，从而反对任何低于预期的方案。</strong><br><em>“这反酒驾的宣传究竟有什么用？人们还是会醉酒驾车的。”</em></p></blockquote><h3 id="相对论谬误">相对论谬误</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/28_%E7%9B%B8%E5%AF%B9%E8%AE%BA%E8%B0%AC%E8%AF%AF.jpg" alt="相对论谬误"></p><blockquote><p><strong>否定某样客观事实，认为事实是相对一个或一群人而言的。</strong><br><em>“那对你来说可能是对的。但对我来说不是。”</em></p></blockquote><h3 id="以偏概全"><a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%81%8F%E6%A6%82%E5%85%A8">以偏概全</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/29_%E4%BB%A5%E5%81%8F%E6%A6%82%E5%85%A8.jpg" alt="以偏概全"></p><blockquote><p><strong>认为从小样本观察到的同样适用于整体。</strong><br><em>“这家大型制鞋商在血汗工厂里雇用童工。可想而知所有制鞋公司都是邪恶的童工奴隶主！”</em></p></blockquote><h3 id="一概而论">一概而论</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/30_%E4%B8%80%E6%A6%82%E8%80%8C%E8%AE%BA.jpg" alt="一概而论"></p><blockquote><p><strong>宽泛地应用一般性原则。</strong><br><em>“那些年轻人暴乱是因为他们缺失有道德观念的父亲。”</em></p></blockquote><h3 id="中词不周延"><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E8%A9%9E%E4%B8%8D%E5%91%A8%E5%BB%B6">中词不周延</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/31_%E4%B8%AD%E8%AF%8D%E4%B8%8D%E5%91%A8%E5%BB%B6.jpg" alt="中词不周延"></p><blockquote><p><strong>因两件事有一个共通点，那么他们就是同一回事。</strong><br><em>“理论是尚未证实的观点。科学家用‘进化论’这一词，可见进化是未被证实的。”</em></p></blockquote><h2 id="操纵内容">操纵内容</h2><h3 id="临阵救援">临阵救援</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/32_%E4%B8%B4%E9%98%B5%E6%95%91%E6%8F%B4.jpg" alt="临阵救援"></p><blockquote><p><strong>通过不断修改论据，搪塞问题，来保全自己的一贯主张。</strong><br><em>“…但除了更好的卫生，医药，教育，灌溉，公共卫生，道路，净水系统和公共秩序…罗马人为我们做了什么？”</em></p></blockquote><h3 id="一孔之见">一孔之见</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/33_%E4%B8%80%E5%AD%94%E4%B9%8B%E8%A7%81.jpg" alt="一孔之见"></p><blockquote><p><strong>用不具代表性的样本所得出的结论，来支持自己的论点。</strong><br><em>“我们的网上调查表示，90%的互联网用户反对网络隐私法。”</em></p></blockquote><h3 id="确认偏误"><a href="https://zh.wikipedia.org/wiki/%E7%A2%BA%E8%AA%8D%E5%81%8F%E8%AA%A4">确认偏误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/34_%E7%A1%AE%E8%AE%A4%E5%81%8F%E8%AF%AF.jpg" alt="确认偏误"></p><blockquote><p><strong>挑拣对自己有利的证据，而故意无视相冲突的。</strong><br><em>“很明显911事件是美国政府为了合理化伊拉克与阿富汗战争而发动的阴谋。没有飞机撞上五角大楼。双子塔的倒塌是控制爆破。。。等等”</em></p></blockquote><h3 id="伪二分法"><a href="https://zh.wikipedia.org/wiki/%E5%81%87%E5%85%A9%E9%9B%A3%E6%8E%A8%E7%90%86">伪二分法</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/35_%E4%BC%AA%E4%BA%8C%E5%88%86%E6%B3%95.jpg" alt="伪二分法"></p><blockquote><p><strong>隐藏其它可能性，将两个对立的观点看作仅有的选择。</strong><br><em>“我们要么就得削减教育预算，要么就得负更多的债。我们不能负更多的债了，所以我们非降低教育预算不可。”</em></p></blockquote><h3 id="谎言"><a href="https://zh.wikipedia.org/wiki/%E8%B0%8E%E8%A8%80">谎言</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/36_%E8%B0%8E%E8%A8%80.jpg" alt="谎言"></p><blockquote><p><strong>彻头彻尾的谎言，被作为真相一再重复。</strong><br><em>“我没有和那个女人发生性关系。”</em></p></blockquote><h3 id="误导性鲜活个案"><a href="https://zh.wikipedia.org/wiki/%E8%BB%BC%E4%BA%8B%E8%AD%89%E6%93%9A#%E8%AA%A4%E5%B0%8E%E6%80%A7%E9%AE%AE%E6%B4%BB%E5%80%8B%E6%A1%88">误导性鲜活个案</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/37_%E8%AF%AF%E5%AF%BC%E6%80%A7%E9%B2%9C%E6%B4%BB%E4%B8%AA%E6%A1%88.jpg" alt="误导性鲜活个案"></p><blockquote><p><strong>用生动的细节来描述一次小概率事件，以让别人相信这是一个问题。</strong><br><em>“在法院判决同性婚姻合法化之后，学校图书馆被要求存有同性文学作品；小学生会读到同性恋的童话故事，甚至有明确支持同性恋的手册。”</em></p></blockquote><h3 id="转移注意">转移注意</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/38_%E8%BD%AC%E7%A7%BB%E6%B3%A8%E6%84%8F.jpg" alt="转移注意"></p><blockquote><p><strong>将毫不相关的话题引入辩论，以干扰视线并导向不同的结论。</strong><br><em>“参议员不需要为他开销的异常做出说明。毕竟，有些参议员做的破事儿比这严重多了。”</em></p></blockquote><h3 id="滑坡谬误"><a href="https://zh.wikipedia.org/wiki/%E6%BB%91%E5%9D%A1%E8%AC%AC%E8%AA%A4">滑坡谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/39_%E6%BB%91%E5%9D%A1%E8%B0%AC%E8%AF%AF.jpg" alt="滑坡谬误"></p><blockquote><p><strong>认为开始的一小步会无可避免地引发一串相关（负面）的事件。</strong><br><em>“如果我们将大麻合法化，更多的人就会开始吸食毒品和海洛因。到时候我们就得也合法化那些。”</em></p></blockquote><h3 id="隐瞒证据">隐瞒证据</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/40_%E9%9A%90%E7%9E%92%E8%AF%81%E6%8D%AE.jpg" alt="隐瞒证据"></p><blockquote><p><strong>有意不用相关且重要的信息，因为那对立于自己的结论。</strong><br><em>“炒菜产生的油烟是PM2.5的重要来源，所以要治理雾霾，中国人就得少做菜。”</em></p></blockquote><h3 id="无法证伪">无法证伪</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/41_%E6%97%A0%E6%B3%95%E8%AF%81%E4%BC%AA.jpg" alt="无法证伪"></p><blockquote><p><strong>提出一个无法被证伪的观点，因为无法加以验证。</strong><br><em>“他撒谎是因为鬼上身了。”</em></p></blockquote><h2 id="混淆因果">混淆因果</h2><h3 id="肯定后件"><a href="https://zh.wikipedia.org/wiki/%E8%82%AF%E5%AE%9A%E5%BE%8C%E4%BB%B6">肯定后件</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/42_%E8%82%AF%E5%AE%9A%E5%90%8E%E4%BB%B6.jpg" alt="肯定后件"></p><blockquote><p><strong>认为对你所观察到的现象只有一种解释。</strong><br><em>“婚姻会带来孩子的降生。所以这就是其存在的理由。”</em></p></blockquote><h3 id="循环逻辑">循环逻辑</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/43_%E5%BE%AA%E7%8E%AF%E9%80%BB%E8%BE%91.jpg" alt="循环逻辑"></p><blockquote><p><strong>论证的前提里已经蕴含结论。</strong><br><em>“《圣经》上说上帝存在。由于圣经是上帝的话，圣经必然正确。所以上帝是存在的。”</em></p></blockquote><h3 id="相关即因果">相关即因果</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/44_%E7%9B%B8%E5%85%B3%E5%8D%B3%E5%9B%A0%E6%9E%9C.jpg" alt="相关即因果"></p><blockquote><p><strong>认为两个一起发生的事件一定有因果关系。（关联性=因果性）</strong><br><em>“小混混们听主题暴力的饶舌音乐。所以饶舌音乐会造成青少年的暴力行为。”</em></p></blockquote><h3 id="否定前件"><a href="https://zh.wikipedia.org/wiki/%E5%90%A6%E5%AE%9A%E5%89%8D%E4%BB%B6">否定前件</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/45_%E5%90%A6%E5%AE%9A%E5%89%8D%E4%BB%B6.jpg" alt="否定前件"></p><blockquote><p><strong>有这样的结果并非只有一个解释。因此，在这样的情况下从结果反推原因是不准确的。</strong><br><em>“如果你读了好学校，你就会找到好工作。如果你没读好学校，你就找不到好工作。”</em></p></blockquote><h3 id="忽视主因">忽视主因</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/46_%E5%BF%BD%E7%95%A5%E4%B8%BB%E5%9B%A0.jpg" alt="忽视主因"></p><blockquote><p><strong>声称是某事件导致了后果，而实际上另一件（意料之外）的事才是原因。</strong><br><em>“60年代我们开始了性解放运动，而现在人们正死于艾滋。”</em></p></blockquote><h3 id="前后即因果">前后即因果</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/44_%E7%9B%B8%E5%85%B3%E5%8D%B3%E5%9B%A0%E6%9E%9C.jpg" alt="前后即因果"></p><blockquote><p><strong>因为一件事是在另一件事之后发生的，因此也是由那件事引起的。</strong><em>“总统上台之后，失业人数创了历史新高。所以总统阻碍了经济发展。”</em></p></blockquote><h3 id="积非成是"><a href="https://zh.wikipedia.org/wiki/%E7%A9%8D%E9%9D%9E%E6%88%90%E6%98%AF">积非成是</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/48_%E7%A7%AF%E9%9D%9E%E6%88%90%E6%98%AF.jpg" alt="积非成是"></p><blockquote><p><strong>认为一桩错事能被另一桩错事所抵消。</strong><br><em>“不错——这监狱环境恶劣又没人性，不过关的本来就是罪犯！”</em></p></blockquote><h2 id="发起进攻">发起进攻</h2><h3 id="人身攻击"><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E8%BA%AB%E6%94%BB%E6%93%8A">人身攻击</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/49_%E4%BA%BA%E8%BA%AB%E6%94%BB%E5%87%BB.jpg" alt="人身攻击"></p><blockquote><p><strong>绕开论证，针对辩论者本身发起不相干的攻击。</strong><br><em>“你以为自己是生物学专家吗，也好意思来教我们转基因食品的事？”</em></p></blockquote><h3 id="举证责任"><a href="https://zh.wikipedia.org/wiki/%E8%88%89%E8%AD%89%E8%B2%AC%E4%BB%BB_(%E5%93%B2%E5%AD%B8)">举证责任</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/50_%E4%B8%BE%E8%AF%81%E8%B4%A3%E4%BB%BB.jpg" alt="举证责任"></p><blockquote><p><strong>我不需要证明我说的正确——你必须证明它是错的。</strong><br><em>“我坚持认为长期的太阳活动周期是全球变暖的原因。证明我错了啊。”</em></p></blockquote><h3 id="身份主观">身份主观</h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/51_%E8%BA%AB%E4%BB%BD%E4%B8%BB%E8%A7%82.jpg" alt="身份主观"></p><blockquote><p><strong>认为一个论断不可信，因为支持者与之有利益关系。</strong><br><em>“研究手机对健康影响的这个调研有手机公司参与。所以，研究结果不可信。”</em></p></blockquote><h3 id="基因谬误"><a href="https://zh.wikipedia.org/wiki/%E8%B5%B7%E6%BA%90%E8%AC%AC%E8%AA%A4">基因谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/52_%E5%9F%BA%E5%9B%A0%E8%B0%AC%E8%AF%AF.jpg" alt="基因谬误"></p><blockquote><p><strong>攻击一个论点的来源，而非它的内容。</strong><br><em>“这本书是1967年出版的，里面说的东西哪还有价值。”</em></p></blockquote><h3 id="罪恶关联"><a href="https://zh.wikipedia.org/wiki/%E9%97%9C%E8%81%AF%E8%AC%AC%E8%AA%A4#%E7%BD%AA%E6%83%A1%E9%97%9C%E8%81%AF">罪恶关联</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/53_%E7%BD%AA%E6%81%B6%E5%85%B3%E8%81%94.jpg" alt="罪恶关联"></p><blockquote><p><strong>通过将一个论点与形象不良的人或群体联系起来，从而破坏其可信度。</strong><br><em>“哦，你想要放松反恐条例，就像那帮恐怖分子想要的一样。所以你是支持恐怖主义的啰？”</em></p></blockquote><h3 id="稻草人谬误"><a href="https://zh.wikipedia.org/wiki/%E7%A8%BB%E8%8D%89%E4%BA%BA%E8%AB%96%E8%AD%89">稻草人谬误</a></h3><p><img src="https://cdn.jsdelivr.net/gh/endureblaze/sophistry@master/54_%E7%A8%BB%E8%8D%89%E4%BA%BA%E8%B0%AC%E8%AF%AF.jpg" alt="稻草人谬误"></p><blockquote><p><strong>歪曲或简化你对手的论点，以攻击之。</strong><em>甲：“国家应该投入更多的预算来发展教育行业。” 乙：“你这么不爱国，居然想减少国防开支，让外国列强有机可乘。”</em></p></blockquote><h2 id="参考内容">参考内容</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://en.wikipedia.org/wiki/Norm_(philosophy)">Norm (philosophy) - Wikipedia</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/Category:%E9%9D%9E%E5%BD%A2%E5%BC%8F%E8%AC%AC%E8%AA%A4">分类:非形式谬误 - 维基百科，自由的百科全书</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/Category:%E8%AC%AC%E8%AA%A4">分类:谬误 - 维基百科，自由的百科全书</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/%E8%A9%AD%E8%BE%AF">诡辩 - 维基百科，自由的百科全书</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">修辞的操纵，逻辑的谬误。</summary>
    
    
    
    <category term="正经文字" scheme="https://blog.imyan.ren/categories/%E6%AD%A3%E7%BB%8F%E6%96%87%E5%AD%97/"/>
    
    
  </entry>
  
  <entry>
    <title>解决方案.方案</title>
    <link href="https://blog.imyan.ren/posts/notes/"/>
    <id>https://blog.imyan.ren/posts/notes/</id>
    <published>2020-11-14T06:07:10.000Z</published>
    <updated>2023-01-09T05:44:09.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>日常解决问题基本靠 Google，拿来水博客跟 <em>Copy&amp;Paste</em> 也没啥区别，但是又想把这些方法记录下来，万一以后需要用还方便查看，于是打算全部写在这一篇文章里了。</p><p>当然，为了防止未来的我忘记当时写的是什么东西，咱尽量将一些因人而异、因机而异的东西标注出来（比如每段的 Replacement），但难免有疏漏，如果有读者能够看到，并感到疑惑，请不要吝啬你的留言。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="引用自 [Buta Sticky Notes - 丁丁の店](https://blog.butanediol.me/2020/10/13/Buta-Sticky-Notes/)">[1]</span></a></sup></p></blockquote><div class="note info flat"><p>因为我是用的是 Windows 10 系统所以一下的东西只保证在 Windows 10 有用其他系统，诸如 Windows 7/Linux/macOS 请自行查找方案</p></div><h2 id="目前可用的-VS-Code-调试-C-C-配置">目前可用的 VS Code 调试 C/C++ 配置</h2><blockquote><p>2020-11-12 19:53 GMT +8<br>基于网上现有的稍加修改</p></blockquote><div class="note info flat"><p>请替换 [debugger_path] 并且保证你的 gcc 是可用状态，或者使用其他的编译器/调试器</p></div><p><strong><code>launch.json</code></strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 使用 IntelliSense 了解相关属性。</span></span><br><span class="line">  <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">  <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2,0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//配置文件的版本，以前使用是0.2.0，新版本已经弃用，改用为2.0.0</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">//配置域</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> <span class="comment">//配置文件的名字，可以随便起</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">//调试的类型，Vscode现在支持很多，我这里主要是C，所以只能是cppdbg</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">//配置文件的请求类型，有launch和attach两种，具体看官方文档</span></span><br><span class="line">      <span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span> <span class="comment">//硬件内核架构，为64bit，如图设置</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//可执行文件的路径和文件名称</span></span><br><span class="line">      <span class="comment">//&quot;args&quot;: [&quot;file1&quot;, &quot;file2&quot;], //主函数调用时传入的参数</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//设为true时程序将暂停在程序入口处</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//调试时的工作目录</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//不知道干嘛的</span></span><br><span class="line">      <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openOnSessionStart&quot;</span><span class="punctuation">,</span> <span class="comment">//</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//调试时是否显示控制台窗口</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">//指定连接的调试器，可以省略不写</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[debugger_path]/gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">//调试器路径,在Linux环境下需要注释掉这一行</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">//不知道干嘛的</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>tasks.json</code></strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">// 任务名称，与launch.json的preLaunchTask相对应</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">// 要使用的编译器</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成和调试有关的信息</span></span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">        <span class="string">&quot;-fexec-charset=GBK&quot;</span> <span class="comment">// 防止中文乱码，按需取用</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译命令参数</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span> <span class="comment">// 可以为shell或process，前者相当于先打开shell再输入命令，后者是直接运行命令</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[debugger_path]/bin&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compiler: gcc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Win10-任务栏菜单小图标变黑了">Win10 任务栏菜单小图标变黑了</h2><blockquote><p>2020-9-10 16:55 GMT+8<br>建议创建开机任务执行</p></blockquote><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ie4uinit <span class="literal">-show</span></span><br></pre></td></tr></table></figure><h2 id="通过-JDK-生成-JRE">通过 JDK 生成 JRE</h2><blockquote><p>2020-9-22 9:36 GMT+8</p></blockquote><div class="note warning flat"><p>需要管理员权限的 CMD 运行</p></div><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> %JAVA_HOME%</span><br><span class="line">bin\jlink.exe <span class="literal">--module-path</span> jmods <span class="literal">--add-modules</span> java.desktop <span class="literal">--output</span> jre</span><br></pre></td></tr></table></figure><h2 id="使用-hexo-reference-插件生成脚注编号重复">使用 hexo-reference 插件生成脚注编号重复</h2><ol><li><p>找到 <code>\&lt;blog_root_folder&gt;\node_modules\hexo-reference\src\footnotes.js</code></p></li><li><p>删除或者注释这几行代码</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render footnotes (HTML)</span></span><br><span class="line">footnotes.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">footNote</span>) &#123;</span><br><span class="line">    html += <span class="string">&#x27;&lt;li id=&quot;fn:&#x27;</span> + footNote.<span class="property">index</span> + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">  -&gt;<span class="comment">// html += &#x27;&lt;span style=&quot;display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px&quot;&gt;&#x27;;</span></span><br><span class="line">  -&gt;<span class="comment">// html += footNote.index;</span></span><br><span class="line">  -&gt;<span class="comment">// html += &#x27;.&lt;/span&gt;&#x27;;</span></span><br><span class="line">    html += <span class="string">&#x27;&lt;span style=&quot;display: inline-block; vertical-align: top; margin-left: 10px;&quot;&gt;&#x27;</span>;</span><br><span class="line">    html += md.<span class="title function_">renderInline</span>(footNote.<span class="property">content</span>.<span class="title function_">trim</span>());</span><br><span class="line">    html += <span class="string">&#x27;&lt;a href=&quot;#fnref:&#x27;</span> + footNote.<span class="property">index</span> + <span class="string">&#x27;&quot; rev=&quot;footnote&quot;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Grub-找不到-Windows-引导了">Grub 找不到 Windows 引导了</h2><blockquote><p>2021-3-19 11:12 GMT+8<br>我是用的是 Manjaro</p></blockquote><p>首先需要安装 <code>os-prober</code>，然后打开 <code>/etc/default/grub</code>，编辑或者添加以下几项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRUB_TIMEOUT_STYLE=menu  #显示菜单</span><br><span class="line">GRUB_TIMEOUT=10   #超时时间10秒</span><br><span class="line">GRUB_DISABLE_OS_PROBER=false   #允许os探测</span><br></pre></td></tr></table></figure><p>修改完成后运行 <code>sudo update-grub</code> 就可以找到 Windows 引导了。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">引用自 <a href="https://blog.butanediol.me/2020/10/13/Buta-Sticky-Notes/">Buta Sticky Notes - 丁丁の店</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">提出了几个可以解决问题的方案.项目</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>修改 Windows 10 的用户名以及用户文件夹</title>
    <link href="https://blog.imyan.ren/posts/8e165a5c/"/>
    <id>https://blog.imyan.ren/posts/8e165a5c/</id>
    <published>2020-09-15T14:54:01.000Z</published>
    <updated>2023-01-09T05:44:09.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="note warning flat"><p>修改注册表有风险，操作需谨慎，注意备份重要文件</p></div><p>由于 Windows 10 的奇葩机制本地账户名是在线账户邮箱的前五位，导致我登录在线账户之后在本地显示的名称以及文件夹从我名字全拼的 <code>nihaocun</code> 变成了 <code>nihao</code>，虽然能忍，但是越看越不顺眼，就开始在网上找修改的方法。然而搜到的结果也大多不完整，好在还是能拼起来的，现在终于是改成功了。</p><div class="note info flat"><p>以下操作在 你的个人账户 完成</p></div><h2 id="开启-Administrator-账户">开启 Administrator 账户</h2><p>我们需要开启这个账户去修改注册表和文件夹名，家庭版用户请先升级到专业版，专业版用户打开<code>控制面板</code> -&gt; <code>系统和安全</code> -&gt; <code>管理工具</code> -&gt; <code>计算机管理</code>，然后按图所示依次打开<code>本地用户和组</code> -&gt; <code>用户</code> -&gt; <code>Administrator</code>，然后去掉 <code>账户已禁用</code> 前面的复选框即可。<img src="../../media/article_img/modify_win10_username_userprofile/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%A1%E7%90%86.png" alt="开启 Administrator 账户"></p><h2 id="修改用户名">修改用户名</h2><p>接着不关闭计算机管理，找到你需要修改的用户名，然后右键重命名即可，注意这里不能和计算机名重复（大小写不敏感）</p><div class="note info flat"><p>以下操作在 Administrator 完成</p></div><h2 id="修改注册表">修改注册表</h2><p>注销当前账户切换到 Administrator，按下 <code>Win + R</code> 打开命令窗口，输入 <code>regedit</code> 回车运行打开注册表编辑器。使用 <code>Ctrl + F</code> 搜索 <code>ProfileList</code> 或者手动定位到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\ProfileList</code> 这一项。在这里有很多 <code>S-1-5</code> 开头的项，依次检查会有一个 <code>ProfileListPath</code> 为 <code>C:\User\&lt;你的用户名&gt;</code> 这一项，双击修改即可。<img src="../../media/article_img/modify_win10_username_userprofile/%E4%BF%AE%E6%94%B9%E6%B3%A8%E5%86%8C%E8%A1%A8.png" alt="修改注册表"></p><h2 id="修改文件夹名">修改文件夹名</h2><p>在文件管理器找到 <code>C:\User\&lt;你的用户名&gt;</code> 然后直接修改即可。</p><div class="note info flat"><p>以下操作在 你的个人账户 完成</p></div><h2 id="创建联接">创建联接</h2><p>现在回到原来的账户发现名字已经改了，而且原来的数据还在，不过部分环境变量以及应用配置可能会出问题，这里提供两个方法：</p><ul><li>一个一个修改路径保证不出错</li><li>创建一个联接<blockquote><p>用管理员权限运行一个 CMD 窗口，然后输入 <code>MKLINK /J C:\Users\&lt;旧用户名&gt; C:\Users\&lt;新用户名&gt;</code>，这样不论访问 <code>C:\Users\&lt;旧用户名&gt;</code> 还是 <code>C:\Users\&lt;新用户名&gt;</code> 都会定位到 <code>C:\Users\&lt;新用户名&gt;</code>。出现下图这样就是成功了。<img src="../../media/article_img/modify_win10_username_userprofile/%E9%93%BE%E6%8E%A5.png" alt="创建联接"></p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">一个咖喱味的特性。</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Windows" scheme="https://blog.imyan.ren/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>怎么呼吸</title>
    <link href="https://blog.imyan.ren/posts/b0821049/"/>
    <id>https://blog.imyan.ren/posts/b0821049/</id>
    <published>2020-07-03T03:34:13.000Z</published>
    <updated>2023-01-09T05:44:09.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不能呼吸的时候是不是很难受？这只海龟也是这么觉得的<img src="../../media/article_img/how2_breathe/%E6%B5%B7%E9%BE%9F.jpg" alt="image"><strong>怎么救它？</strong>尽量不去用一次性的塑料产品比如 不买一次性塑料袋喝饮料的时候不要用吸管放一双公筷点外卖的时候选择「不要餐具」随身带一个保温杯不强求一步到位也不去强迫别人改变从自身的一点点到地球的「亿」点点</p>]]></content>
    
    
    <summary type="html">吸气~呼气~感受你的环保意识。</summary>
    
    
    
    <category term="正经文字" scheme="https://blog.imyan.ren/categories/%E6%AD%A3%E7%BB%8F%E6%96%87%E5%AD%97/"/>
    
    
    <category term="环保" scheme="https://blog.imyan.ren/tags/%E7%8E%AF%E4%BF%9D/"/>
    
    <category term="塑料产品" scheme="https://blog.imyan.ren/tags/%E5%A1%91%E6%96%99%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 系统上给 ssh 设置代理</title>
    <link href="https://blog.imyan.ren/posts/4d70a82d/"/>
    <id>https://blog.imyan.ren/posts/4d70a82d/</id>
    <published>2020-06-01T15:28:25.000Z</published>
    <updated>2023-01-09T05:44:09.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="note info flat"><p>看清，使用的系统是 Windows 不是 Linux 或者 MacOS</p></div><p>百度搜到的很多给 git 设置代理的办法，都是给 http 设置代理，而不是给 SSH 设置代理。那个 <code>git config --global http.proxy http://127.0.0.1:1080</code> 设置起来，只针对 http 的 git 有效果。然后就是 <code>ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</code>，那个分明是给 Linux 才能用的， Windows 上哪里来的 nc 程序？</p><p>以下操作是给 Windows 用的，我的操作：</p><p>在自己的用户文件夹找到 .ssh 文件夹，比如我的是 <code>C:\Users\nihao\.ssh</code> ，在里面新建一个空白文件，取名 config，如果已经有了就不用创建了。</p><p>注意不是 config.txt ！</p><p>我强烈建议把 Windows 的后缀显示给打开，不然你根本不知道自己到底在编辑什么文件。</p><p>都用 Git 了不至于还害怕自己把文件后缀名给改错了吧？</p><p>在 config 文件里写上一行就行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProxyCommand <span class="string">&quot;C:\Program Files\Git\mingw64\bin\connect.exe&quot;</span> <span class="literal">-S</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> %<span class="built_in">h</span> %p</span><br></pre></td></tr></table></figure><p>这里 git 的安装路径和后面的代理自己看着填，不要试着用相对路径，保证要吃亏。因为 <code>Program Files</code> 文件夹中间带一个空格，所以这里需要把整个路径给引号引起来。 后面的代理的话，<code>-S</code> 指是 socks 代理，默认是 socks5，<code>127.0.0.1:1080</code> 就是你本地的代理地址，后面的 <code>%h %p</code> 意思是 Host 和 Port，必须得写上，我也不知道为什么要这么设计。 如果要使用 HTTP 代理，就写 <code>-H</code>，更多代理类型（比如 socks4）请参 <a href="https://bitbucket.org/gotoh/connect/wiki/Home#!more-detail">这个</a>。</p><p>上这个写法是针对全局的，如果想只针对某个网站的话，就这么写：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  ProxyCommand <span class="string">&quot;C:\Program Files\Git\mingw64\bin\connect.exe&quot;</span> <span class="literal">-S</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> %<span class="built_in">h</span> %p</span><br></pre></td></tr></table></figure><p>现在就可以愉快的使用代理了，不过要记住一定使用 ssh 协议。</p>]]></content>
    
    
    <summary type="html">没有代理可怎么愉快的&lt;del&gt;抄&lt;/del&gt;借鉴代码</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Windows" scheme="https://blog.imyan.ren/tags/Windows/"/>
    
    <category term="ssh" scheme="https://blog.imyan.ren/tags/ssh/"/>
    
    <category term="代理" scheme="https://blog.imyan.ren/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>updateConfiguration 弃用之后更换语言应该何去何从</title>
    <link href="https://blog.imyan.ren/posts/9e078f24/"/>
    <id>https://blog.imyan.ren/posts/9e078f24/</id>
    <published>2020-05-09T15:03:24.000Z</published>
    <updated>2023-01-09T05:44:09.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="note info flat"><p>注意本文使用的语言的是 Kotlin，如需 Java 请自行转换或在网络自行搜索，本文的 minSDK 为 21</p></div><h2 id="弃用">弃用</h2><p>通常提起 Android 程序更换语言可能会想到 <code>Context</code> 的 <code>getResources().updateConfiguration(configuration, displayMetrics)</code>,传入设置好 <code>Locale</code> 的 <code>configuration</code> 以及 <code>Context</code> 的 <code>getResources().getDisplayMetrics()</code>。</p><p>然而这个方法在现在已经被标记为 deprecated，这意味着以后的版本可能用不了这个了。</p><blockquote><p>这是官方的信息：‘updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics)’ is deprecatedDeprecatedSee android.content.Context.createConfigurationContext(Configuration).</p></blockquote><p>那简单了，我们只需要看看 <code>Context.createConfigurationContext(Configuration)</code> 怎么使用就可以了，分析一下，这个方法是返回一个 <code>Context</code>，那我们只需要重写一下 <code>ContextWrapper</code> 就好了,这样获取到的就是用一个 <code>Context</code>，保证更换语言成功。</p><h2 id="重写-ContextWrapper">重写 ContextWrapper</h2><p>这是我写好的 <code>ContextWrapper</code>，比较简单，需要说明的东西我都写在注释了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">ContextWrapper</span>(base: Context?) : ContextWrapper(base) &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="comment">//这里使用注解保证编译通过</span></span><br><span class="line">        <span class="meta">@RequiresApi(Build.VERSION_CODES.N)</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">wrap</span><span class="params">(context: <span class="type">Context</span>, newLocale: <span class="type">Locale</span>?)</span></span>: ContextWrapper &#123;</span><br><span class="line">            <span class="keyword">var</span> mContext = context</span><br><span class="line">            <span class="keyword">val</span> res: Resources = mContext.resources</span><br><span class="line">            <span class="keyword">val</span> configuration: Configuration = res.configuration</span><br><span class="line">            <span class="comment">//注意 Android 7.0 前后的不同处理方法</span></span><br><span class="line">            mContext = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                configuration.setLocale(newLocale)</span><br><span class="line">                <span class="keyword">val</span> localeList = LocaleList(newLocale)</span><br><span class="line">                LocaleList.setDefault(localeList)</span><br><span class="line">                configuration.setLocales(localeList)</span><br><span class="line">                mContext.createConfigurationContext(configuration)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                configuration.setLocale(newLocale)</span><br><span class="line">                mContext.createConfigurationContext(configuration)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ContextWrapper(mContext)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="准备好切换工具">准备好切换工具</h2><p>我这里准备了一个语言的工具类可以参考一下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> LanguageUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置语言的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lan 需要设置的语言</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setLanguage</span><span class="params">(context: <span class="type">Context</span>, lan: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        context.getSharedPreferences(<span class="string">&quot;settings&quot;</span>, <span class="number">0</span>).edit &#123;</span><br><span class="line">            putString(<span class="string">&quot;language&quot;</span>, lan)</span><br><span class="line">            <span class="keyword">this</span>.commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取应用于选择语言对话框的 checkedItem</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCheckedItem</span><span class="params">(context: <span class="type">Context</span>)</span></span>: <span class="built_in">Int</span> =</span><br><span class="line">        <span class="keyword">when</span> (context.getSharedPreferences(<span class="string">&quot;settings&quot;</span>, <span class="number">0</span>).getString(<span class="string">&quot;language&quot;</span>, <span class="string">&quot;cn&quot;</span>)) &#123;</span><br><span class="line">            <span class="string">&quot;auto&quot;</span> -&gt; <span class="number">0</span></span><br><span class="line">            <span class="string">&quot;zh-rCN&quot;</span> -&gt; <span class="number">1</span></span><br><span class="line">            <span class="string">&quot;zh-rTW&quot;</span> -&gt; <span class="number">2</span></span><br><span class="line">            <span class="string">&quot;en&quot;</span> -&gt; <span class="number">3</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前设置的 Locale</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getLocale</span><span class="params">(context: <span class="type">Context</span>)</span></span>: Locale =</span><br><span class="line">        <span class="keyword">when</span> (context.getSharedPreferences(<span class="string">&quot;settings&quot;</span>, <span class="number">0</span>).getString(<span class="string">&quot;language&quot;</span>, <span class="string">&quot;cn&quot;</span>)) &#123;</span><br><span class="line">            <span class="string">&quot;auto&quot;</span> -&gt; getSysLocale()</span><br><span class="line">            <span class="string">&quot;zh-rCN&quot;</span> -&gt; Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&quot;CN&quot;</span>)</span><br><span class="line">            <span class="string">&quot;zh-rTW&quot;</span> -&gt; Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&quot;TW&quot;</span>)</span><br><span class="line">            <span class="string">&quot;en&quot;</span> -&gt; Locale(<span class="string">&quot;en&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; getSysLocale()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前系统的 Locale</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getSysLocale</span><span class="params">()</span></span>: Locale = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">        LocaleList.getDefault()[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Locale.getDefault()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了 <code>object</code> 关键字让他变成一个单例类，而且我选择的是把设置的语言信息通过 <code>SharedPreferences</code> 进行存储，这里根据你的实际情况来调整就 OK。</p><h2 id="使用">使用</h2><p>在<strong>每一个</strong> <code>Activity</code> 或者你封装好的 <code>BaseActivity</code> 里重写这样的方法即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.N)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">attachBaseContext</span><span class="params">(newBase: <span class="type">Context</span>?)</span></span> &#123;</span><br><span class="line">    <span class="comment">//如果不使用工具类也可以在这里处理好 Locale 传入</span></span><br><span class="line">    <span class="keyword">val</span> context = newBase?.let &#123;</span><br><span class="line">        ContextWrapper.wrap(newBase,LanguageUtil.getLocale(newBase))</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以正常的切换语言了</p>]]></content>
    
    
    <summary type="html">为什么 Google 总是会弃用好用的 API？</summary>
    
    
    
    <category term="编程" scheme="https://blog.imyan.ren/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="踩坑" scheme="https://blog.imyan.ren/tags/%E8%B8%A9%E5%9D%91/"/>
    
    <category term="Android" scheme="https://blog.imyan.ren/tags/Android/"/>
    
    <category term="Kotlin" scheme="https://blog.imyan.ren/tags/Kotlin/"/>
    
    <category term="弃用" scheme="https://blog.imyan.ren/tags/%E5%BC%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用 Kotlin 编写一个懒加载与 ViewBinding 的 Fragment</title>
    <link href="https://blog.imyan.ren/posts/51f7c2cb/"/>
    <id>https://blog.imyan.ren/posts/51f7c2cb/</id>
    <published>2020-04-26T15:14:44.000Z</published>
    <updated>2023-01-09T05:44:09.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有关 ViewBinding 的用法看 <a href="https://developer.android.google.cn/topic/libraries/view-binding">这里</a></p><p>最近在学习 Kotlin 的时候有遇到需要封装一个拥有懒加载功能的 Fragment，并且我还想用上新的 ViewBinding 功能。那么第一个实现比较简单的，之前在 Java 也封装过，唯一的问题就是之前使用的是重写 <code>setUserVisibleHint</code> 方法来实现的，不过这个方法已经被标记为 <code>deprecated</code>（弃用的）了，指不定那一天就用不了了。根据官方的提示：</p><blockquote><p>DeprecatedUse FragmentTransaction.setMaxLifecycle(Fragment, Lifecycle.State) instead.</p></blockquote><p>我们现在应该去调用 <code>setMaxLifecycle</code> 方法来实现这个功能，使用 <code>setMaxLifecycle</code> 来限制了 Fragment 的生命周期，Fragment 的 <code>onReseume()</code> 只有当 Fragment 显示在屏幕上时才会执行，这样就可以把加载数据的方法放在 <code>onResume()</code> 方法中来实现懒加载了。在 <code>FragmentPagerAdapter</code> 适配器构造方法中有一个 <code>behavior</code> 参数，我们只需要传入一个参数就可以限制他的生命周期了。</p><p>那么剩下的就是 <code>ViewBinding</code> 了，这个只需要在继承的时候传入参数就好了，那就开始动手</p><h2 id="BaseFragment-部分">BaseFragment 部分</h2><p>首先贴上代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装一个有懒加载的 Fragment</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> T 传入泛型的 ViewBinding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> layoutId 传入布局用来跳过在子类中初始化传入 inflater</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseFragment</span>&lt;<span class="type">T : ViewBinding</span>&gt;(<span class="keyword">private</span> <span class="keyword">val</span> layoutId: <span class="built_in">Int</span>) : Fragment(layoutId) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isViewOK = <span class="literal">false</span> <span class="comment">//是否完成 View 初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFirst = <span class="literal">true</span> <span class="comment">//是否为第一次加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _binding: T? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding!!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">val</span> view = inflater.inflate(layoutId, container, <span class="literal">false</span>)</span><br><span class="line">        <span class="comment">// 完成 initView 后改变view的初始化状态为完成</span></span><br><span class="line">        isViewOK = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        _binding = initBinding(view)</span><br><span class="line">        initView()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入对应的 ViewBinding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initBinding</span><span class="params">(view: <span class="type">View</span>)</span></span>: T</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fragment 初始化 view 的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        <span class="comment">//在 onResume 进行数据懒加载</span></span><br><span class="line">        initLoadData()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initLoadData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isViewOK &amp;&amp; isFirst) &#123;</span><br><span class="line">            <span class="comment">//加载数据时判断是否完成view的初始化，以及是不是第一次加载此数据</span></span><br><span class="line">            loadDate()</span><br><span class="line">            <span class="comment">//加载第一次数据后改变状态，后续不再重复加载</span></span><br><span class="line">            isFirst = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fragment 实现懒加载的方法，即在这里加载数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadDate</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        _binding = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么好说的，主要的东西我都写在注释里了，只有两点要注意下：</p><ul><li>class 必须声明为 abstract 这样才能让子类去实现懒加载的方法</li><li>注意 <code>_binding</code> 和 <code>binding</code>，这两个一个对外一个对内，对内的注意在 onDestroyView 进行释放，以免内存泄漏</li></ul><h2 id="子类-TestFragment">子类 TestFragment</h2><p>那我们看看这个应该如何使用吧（假设你的 Fragment 的布局名称是 fragment_test，里面有一个 id 为 tvMain 的 TextView）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestFragment</span> : <span class="type">BaseFragment</span>&lt;<span class="type">FragmentTestBinding</span>&gt;(R.layout.fragment_test) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initBinding</span><span class="params">(view: <span class="type">View</span>)</span></span>: FragmentTestBinding &#123;</span><br><span class="line">        <span class="keyword">return</span> FragmentTestBinding.bind(view)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这里是初始化 View 的方法</span></span><br><span class="line">        binding.tvMain.text = <span class="string">&quot;HI&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadDate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这里的初始化了数据的方法</span></span><br><span class="line">        Toast.makeText(activity,<span class="string">&quot;我初始化了数据&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟简单吧，做到了 View 与数据的分离</p><h2 id="ViewAdapter-的处理">ViewAdapter 的处理</h2><p>那说了这么多，「那个参数」 到底在哪里呢？来了来了，不过我们要先写一个 adapter 才可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewPagerAdapter</span> <span class="keyword">constructor</span> (</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fragmentManager: FragmentManager,</span><br><span class="line">    <span class="comment">// 注意看这个参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> behavior: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fragmentList: List&lt;BaseFragment&lt;*&gt;&gt;</span><br><span class="line">) :</span><br><span class="line">    FragmentPagerAdapter(fragmentManager, behavior) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment = fragmentList[position]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = fragmentList.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，只是重写了几个方法而已，不过接下来才是重点,在调用传入的时候我们需要转入重要的参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">viewPager.adapter = ViewPagerAdapter(</span><br><span class="line">            supportFragmentManager,</span><br><span class="line">            <span class="comment">// 看这里</span></span><br><span class="line">            FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT,</span><br><span class="line">            fragmentList</span><br><span class="line">        )</span><br><span class="line"><span class="comment">// 设置预加载的数量，来测试懒加载是否成功</span></span><br><span class="line">viewPager.offscreenPageLimit = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>注意看我们传入了 <code>FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT</code>，这个参数就是作为限制 Fragment 生命周期而存在的。</p><p>这样就简单的实现了需要的功能了。</p>]]></content>
    
    
    <summary type="html">用一个语法糖糅合怪去糅合一堆特性。</summary>
    
    
    
    <category term="编程" scheme="https://blog.imyan.ren/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="踩坑" scheme="https://blog.imyan.ren/tags/%E8%B8%A9%E5%9D%91/"/>
    
    <category term="Android" scheme="https://blog.imyan.ren/tags/Android/"/>
    
    <category term="ViewPager" scheme="https://blog.imyan.ren/tags/ViewPager/"/>
    
    <category term="Fragment" scheme="https://blog.imyan.ren/tags/Fragment/"/>
    
    <category term="Kotlin" scheme="https://blog.imyan.ren/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>开往 - Travellings</title>
    <link href="https://blog.imyan.ren/posts/58ae8d54/"/>
    <id>https://blog.imyan.ren/posts/58ae8d54/</id>
    <published>2020-04-22T03:14:28.000Z</published>
    <updated>2023-01-09T05:44:09.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="什么是开往">什么是开往</h2><p>这是一个来自于国外的想法，在网站显眼的位置，加入一个认证的徽标，代表网站已经加入了友链助力，如果访客点击徽标，将随机前往另一个计划内的网站。</p><h2 id="为什么要开往">为什么要开往</h2><p>互联网将人与人之间的距离大大减小，却还是形成了大大小小的孤岛。只有熟人间才知道彼此，而陌生人永远只能是陌生人。</p><blockquote><p>“开往”取自“开放的网络”。 将一群志同道合的人连接在一起，我们共享彼此的流量，帮助陌生人发现新大陆。</p></blockquote><p>开往-友链助力是传统友链的增强，我们不必互相知道了解彼此，标准的审查让友好的朋友加入我们，只需要一个徽标，占用一块位置，我们所有人都联系在了一起，简单而又强大。大大小小的孤岛散落在浩瀚烟海，开往就像是一颗颗星球之间的快速列车，随机的跳向下一站。</p><h2 id="怎么加入开往">怎么加入开往</h2><a class="btn-beautify " href="https://github.com/volfclub/travellings"   title="开往-友链接力"><i class="block center larger"></i><span>开往-友链接力</span></a><p>这是项目的 Github 地址，在 issue 中提交申请，几日内就会受理。但是申请的网站必须满足几点要求：</p><ol><li>愿为开放的网络做出贡献（如分享知识经验设计等）；</li><li>没有违法以及影响体验的内容（如侵入式广告等）；</li><li>正常更新维护中（国内无法正常访问会被移除）；</li><li>强制启用 https 。</li></ol><p>满足以上要求，并将徽标插入您网页<strong>明显的地方</strong>（让友链传递下去）。</p><p><strong>下面就是通向异域的按钮。</strong></p><p><a href="https://travellings.link/" target="blank"><img src="https://travellings.link/assets/logo.gif" alt="开往-友链接力" width="120"></a></p>]]></content>
    
    
    <summary type="html">再看？再看就把你开走。</summary>
    
    
    
    <category term="正经文字" scheme="https://blog.imyan.ren/categories/%E6%AD%A3%E7%BB%8F%E6%96%87%E5%AD%97/"/>
    
    
    <category term="开往" scheme="https://blog.imyan.ren/tags/%E5%BC%80%E5%BE%80/"/>
    
  </entry>
  
  <entry>
    <title>解决 VS Code 编译 C/C++ 是输出中文乱码的问题</title>
    <link href="https://blog.imyan.ren/posts/ea8a69ac/"/>
    <id>https://blog.imyan.ren/posts/ea8a69ac/</id>
    <published>2020-04-08T08:45:23.000Z</published>
    <updated>2023-01-09T05:44:09.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 Windows 下使用 VSCode 编译运行 C/C++，都出现中文乱码的问题，这是由于 Windows 控制台使用的还是 GBK 编码。我在网上搜了一下发现需要更换编译器解决，这里贴一下 <a href="http://blog.00oo00.xyz/">梧矜</a> 的 <a href="https://blog.00oo00.xyz/2020/03/12/ru-he-jie-jue-vscode-bian-yi-yun-xing-c-cheng-xu-shi-shu-chu-zhong-wen-luan-ma/">解决 vscode 编译运行 C 程序时乱码</a>。</p><p>不是这种方式不好，这种确实从根本解决了问题，但是我是实在懒，所以想了一些外门邪道。然后百度到了可以使用 <code>chcp 65001</code> 命令把控制台的编码切换到 UTF-8，当然你可以参考这篇 <a href="https://jingyan.baidu.com/article/f7ff0bfcee2dc22e26bb13d5.html">百度知道</a> 或者这篇 <a href="https://www.cnblogs.com/jpfss/p/11016870.html">博文</a> 把编码永久更改，但是我怕会出奇怪的问题，所以在 VS Code 的配置文件找了找，没想到还真有这种骚操作。</p><div class="note info flat"><p>2020-12-14 更新新方法</p></div><p>其实只要给 code runner 插件、手动编译时、VS Code 调试时上 <code>-fexec-charset=GBK</code> 就好了，之前那种方法简直是绕弯路，交作业的时候只需要把编码改成 GBK 就好了。唯一的缺点就是不能编译 GBK 文件，不过这不是问题。</p><h2 id="偷懒的方式">偷懒的方式</h2><p>在 VS Code 中通过打开 <code>文件</code>-&gt; <code>首选项</code>-&gt; <code>设置</code>，然后编辑 VS Code 的 <code>setting.json</code> ，然后添加如下代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-NoExit&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;chcp 65001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后保存即可，现在编译就不会出现中文乱码的问题了，这里贴一下图</p><p><img src="../../media/article_img/vscode_cpp_chinese_garbled_code/%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="修改前"></p><p><img src="../../media/article_img/vscode_cpp_chinese_garbled_code/%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="修改后"></p><h3 id="缺点">缺点</h3><p>当然缺点也是有的，就是每次编译的时候会在顶部显示一个 <code>Active code page: 65001</code>，不过我觉得无伤大雅，毕竟没换编译器就可以实现差不多的效果还想怎么样。<s>主要还是懒</s></p><h2 id="简便的方式">简便的方式</h2><p><s>其实也可以通过这个按钮解决，不过这个是改变文件的编码，如果把这个文件放到其他设备上可能会有问题</s></p><p><img src="../../media/article_img/vscode_cpp_chinese_garbled_code/%E6%8C%89%E9%92%AE.png" alt="按钮"></p><h2 id="工作区">工作区</h2><p>如果你只需要在这个工作区生效的话只需要这个目录下的 <code>.vscode</code> 文件夹里的 <code>setting.json</code> 添加这个配置就好了，这样只会对这个工作区生效。</p><h2 id="更多">更多</h2><p>有关 <code>chcp</code> 的更多描述</p><blockquote><p>65001 UTF-8 代码页950 繁体中文936 简体中文默认的 GBK437 MS-DOS 美国英语</p></blockquote>]]></content>
    
    
    <summary type="html">GBK 和 UTF-8 相爱相杀。</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="VS Code" scheme="https://blog.imyan.ren/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Dolphin Emulator 玩《星之卡比：Wii》</title>
    <link href="https://blog.imyan.ren/posts/2fbba4ed/"/>
    <id>https://blog.imyan.ren/posts/2fbba4ed/</id>
    <published>2020-03-07T02:57:07.000Z</published>
    <updated>2023-01-09T05:44:09.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>开头附上星之卡比系列的 <a href="https://eyun.baidu.com/s/3i51Jf17">下载地址</a> 还有 Wii 模拟器的 <a href="https://cn.dolphin-emu.org/">下载地址</a></p></blockquote><h2 id="白屏">白屏</h2><p>有些小伙伴在下好游戏并且在模拟器打开之后会遇到一直卡在白屏的情况，如图</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E5%8D%A1%E5%9C%A8%E7%99%BD%E5%B1%8F.png" alt="卡在白屏"></p><p>那么这个时候就要注意是不是模拟器语言设置的问题，我们可以在这里看到游戏的语言</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E6%9F%A5%E7%9C%8B%E8%AF%AD%E8%A8%80.png" alt="查看语言"></p><p>那么可以看到这个语言是 <code>日语</code>，那我们就要把模拟器改成对应的，看图操作，找到 <code>设置 -&gt; Wii -&gt; 系统语言</code>，然后在下拉菜单里找到 <code>对应语言</code>，然后点击关闭即可</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E4%BF%AE%E6%94%B9%E8%AF%AD%E8%A8%80.png" alt="修改语言"></p><p>现在开始游戏就可以正常运行了</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C.png" alt="正常运行"></p><h2 id="无法进入">无法进入</h2><p>那有时候还会出现无法进入游戏界面的情况，会有类似下面这样的提示</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5.png" alt="无法进入"></p><p>那这个情况只需要去 <code>控制器 -&gt; Wii 遥控器</code> 然后点击你要是用的模拟手柄的设置，将 <code>扩展</code> 这一项改成无就可以，看图操作</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%951.png" alt="修改扩展1"></p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%952.png" alt="修改扩展2"></p><p>现在再试试进入游戏就正常了</p><p><img src="../../media/article_img/how2_use_dolphin_play_kirbywii/%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C.png" alt="正常运行"></p>]]></content>
    
    
    <summary type="html">哪个男孩不想来玩星之卡比呢？</summary>
    
    
    
    <category term="星之卡比系列教程" scheme="https://blog.imyan.ren/categories/%E6%98%9F%E4%B9%8B%E5%8D%A1%E6%AF%94%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="星之卡比" scheme="https://blog.imyan.ren/tags/%E6%98%9F%E4%B9%8B%E5%8D%A1%E6%AF%94/"/>
    
    <category term="星之卡比 Wii" scheme="https://blog.imyan.ren/tags/%E6%98%9F%E4%B9%8B%E5%8D%A1%E6%AF%94-Wii/"/>
    
    <category term="Wii 模拟器" scheme="https://blog.imyan.ren/tags/Wii-%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
    <category term="Dolphin Emulator" scheme="https://blog.imyan.ren/tags/Dolphin-Emulator/"/>
    
  </entry>
  
  <entry>
    <title>为什么说宣扬读书无用论的人要么蠢要么坏？</title>
    <link href="https://blog.imyan.ren/posts/e9558acf/"/>
    <id>https://blog.imyan.ren/posts/e9558acf/</id>
    <published>2020-03-03T15:23:29.000Z</published>
    <updated>2023-01-09T05:44:09.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>告诉别人「读书无用」的人，也许他们真的没读过什么书，因为一些机缘巧合，或者家庭资源帮扶，让他们得到了一些成就。</p><p>但你没办法像他们那么幸运。</p><p>读书面对强者，应该是锦上添花；对弱者，应当是雪中送炭。</p><p>读书不单是指文化课，我们需要的是一直保持持续学习的习惯。</p><p>如果你丧失了持续吸收新鲜事物的技能，那你的生活就会处在一个瓶颈。</p><p>这个时候，你就会发现你身边的傻逼上司，傻逼同事和傻逼的朋友，都会层出不穷。</p><p>但你跳不开这个境地，因为你真的相信了读书无用，换言之，你智商也不怎么地。</p>]]></content>
    
    
    <summary type="html">可以不读，不要害人！</summary>
    
    
    
    <category term="正经文字" scheme="https://blog.imyan.ren/categories/%E6%AD%A3%E7%BB%8F%E6%96%87%E5%AD%97/"/>
    
    
    <category term="读书" scheme="https://blog.imyan.ren/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="学习" scheme="https://blog.imyan.ren/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="读书无用论" scheme="https://blog.imyan.ren/tags/%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>不一样又怎样</title>
    <link href="https://blog.imyan.ren/posts/7935321c/"/>
    <id>https://blog.imyan.ren/posts/7935321c/</id>
    <published>2020-03-01T04:58:56.000Z</published>
    <updated>2023-01-09T05:44:09.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>每一个不一样的人，背后都有一个爱他的人</p></blockquote><h2 id="纪录片视频">纪录片视频</h2><iframe style="width: 640px; height: 430px; max-width: 100%" src="https://www.youtube.com/embed/V_M9ZId2QAY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>墙内用户请点击 <a href="https://www.bilibili.com/video/av31143991?p=2">这里</a></p><h2 id="正文">正文</h2><p>纪录片《不一样又怎样》中的台湾少年叶永志被称为玫瑰少年。因为经常被说行为举止不男不女，被老师要求去看医生，还长期遭到同学们的霸凌。终于在一次群体性的霸凌事件中，叶永志再也没睁开眼。</p><p>叶永志去世后，叶妈妈决心要找出杀人凶手，却被谙熟校园霸凌事件的检察官告知，这样的案件，最后的被告均为无罪。后来叶妈妈就成了那些与众不同孩子们的倾诉对象，她收到了很多书信，字字血泪，每一封都透露出「我被人说是怪胎」，「我想我自杀」。</p><p>杨永信的电击网戒中心承接各种不听话的孩子，早恋的、网瘾的、逃课的、打麻将；少年、少女、成年人、老年人被家长朋友亲戚夫妻争先恐后的送上电击床。</p><p>那些人不能接受的，真的只是娘娘腔的吗？不是。他们只是不能接受别人的不一样，今天能把一个所谓「娘娘腔」的男孩子霸凌致死，明天就可能高喊着女生不能涂太鲜艳的口红，而把更多人拽入深渊。</p><p>叶妈妈在宣讲会上说，我们没有错，我们不要哭，我们要向李阳光争取我们自己的权利，我们所有生而为人的权利全部都败在了一个个杨永信的手中。</p><p>为什么要那么惧怕那么憎恶多元的人呢？正因为多元世界才精彩不是吗？那些爱化妆的男孩子，那些剪短头发的女孩子，那些高中是传情书的学生们，都不是社会的毒瘤，而是那些想要用尽一切手段去定义别人一生的人。</p><blockquote><p>勇敢做自己</p></blockquote>]]></content>
    
    
    <summary type="html">每一个不一样的人，背后都有一个爱他的人</summary>
    
    
    
    <category term="正经文字" scheme="https://blog.imyan.ren/categories/%E6%AD%A3%E7%BB%8F%E6%96%87%E5%AD%97/"/>
    
    
    <category term="LGBT" scheme="https://blog.imyan.ren/tags/LGBT/"/>
    
  </entry>
  
  <entry>
    <title>在线游玩 FC（小霸王、红白机）、街机游戏</title>
    <link href="https://blog.imyan.ren/posts/743f9c80/"/>
    <id>https://blog.imyan.ren/posts/743f9c80/</id>
    <published>2020-02-22T14:34:54.000Z</published>
    <updated>2023-01-09T05:44:09.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="../../media/article_img/online_play_nes/%E7%BD%91%E7%AB%99%E6%A0%87%E9%A2%98%E7%95%8C%E9%9D%A2.png" alt="网站标题界面"></p><p><a href="https://www.yikm.net/">点击这里访问 yikm 在线玩游戏</a></p><p>FC 游戏，或者说是国人更熟悉的「小霸王」，可以说承载了 80 后、90 后乃至 00 后共同的童年回忆 。</p><p>随着 PC 机的普及，国内的主机游戏渐渐成了小众爱好，而小霸王成为了这几代许多人对于「手柄游戏」的唯一认知。</p><p>在「小霸王」逐渐在家庭的客厅、玩家的桌面消失以后，很多人都在 PC 机上体验过各种各样的「FC 游戏模拟器」，但是繁杂的参数，无中文的交互界面成为了一种不大不小的阻碍。</p><p>而这次推荐的网站 <code>yikm</code> 就成了这些问题的终极解决方案，你只需要一个浏览器（无论是 PC 还是手机端），访问这个网站，就能在线玩到这些经典的像素风游戏。贴心的在线联机功能</p><p>当那些曾在记忆里响起无数次的 8-bit 音乐响起，不知道你有没有想起儿时的那些玩伴，如今即使你们在物理距离上相隔很远，也可以通过网络很方便地一起怀念童年——只需要通过 yikm 提供的「联机大厅」功能。</p><p><img src="../../media/article_img/online_play_nes/%E8%81%94%E6%9C%BA.png" alt="联机"></p>]]></content>
    
    
    <summary type="html">火速上线来打游戏！</summary>
    
    
    
    <category term="随手记" scheme="https://blog.imyan.ren/categories/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="游戏推荐" scheme="https://blog.imyan.ren/tags/%E6%B8%B8%E6%88%8F%E6%8E%A8%E8%8D%90/"/>
    
    <category term="FC" scheme="https://blog.imyan.ren/tags/FC/"/>
    
  </entry>
  
  <entry>
    <title>半自动化生成博客相册</title>
    <link href="https://blog.imyan.ren/posts/64b2bc9e/"/>
    <id>https://blog.imyan.ren/posts/64b2bc9e/</id>
    <published>2020-02-18T05:10:33.000Z</published>
    <updated>2023-01-09T05:44:09.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>下面有完整代码，自行复制</p></blockquote><h2 id="环境">环境</h2><ul><li><p>Hexo <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a> 主题</p></li><li><p>本地运行脚本需要安装 Python 3</p></li></ul><h2 id="文件层级要求">文件层级要求</h2><p>首先你要知道 Butterfly 的相册格式，类似下面这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>当然里面可以插入网络图片或者本地图片，如果你是网络图片或者混用就不用往下看了，这里只针对使用本地图片。</p><p>然后文件层级要类似下面这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">|   // 这是 Hexo 博客的根目录</span><br><span class="line">|   // 其他文件我就省略了</span><br><span class="line">|</span><br><span class="line">└── source // Hexo 的资源文件目录</span><br><span class="line"><span class="code">       |</span></span><br><span class="line"><span class="code">       |   // 省略其他文件夹</span></span><br><span class="line"><span class="code">       |</span></span><br><span class="line"><span class="code">       └── gallery //相册文件夹，名字可自定义</span></span><br><span class="line"><span class="code">              ├── index.md // 相册的界面文件</span></span><br><span class="line"><span class="code">              ├── images.py // 生成脚本</span></span><br><span class="line"><span class="code">              └── images // 放图片的文件夹</span></span><br><span class="line"><span class="code">                    |</span></span><br><span class="line"><span class="code">                  ......</span></span><br><span class="line"><span class="code">                    //很多图片</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>或者形如以下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">|   // 这是 Hexo 博客的根目录</span><br><span class="line">|   // 其他文件我就省略了</span><br><span class="line">|</span><br><span class="line">└── source // Hexo 的资源文件目录</span><br><span class="line"><span class="code">       |</span></span><br><span class="line"><span class="code">       |   // 省略其他文件夹</span></span><br><span class="line"><span class="code">       |</span></span><br><span class="line"><span class="code">       └── gallery // 可能是一个集合文件夹或者其他</span></span><br><span class="line"><span class="code">              |</span></span><br><span class="line"><span class="code">              |</span></span><br><span class="line"><span class="code">              └── （1-n 级文件夹）// 多少层都无所谓</span></span><br><span class="line"><span class="code">                        |</span></span><br><span class="line"><span class="code">                        └── photo //真正的相册</span></span><br><span class="line"><span class="code">                                ├── index.md // 相册的界面文件</span></span><br><span class="line"><span class="code">                                ├── images.py // 生成脚本</span></span><br><span class="line"><span class="code">                                └── images // 放图片的文件夹</span></span><br><span class="line"><span class="code">                                        |</span></span><br><span class="line"><span class="code">                                      ......</span></span><br><span class="line"><span class="code">                                        //很多图片</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>然后我们打开 <code>index.md</code> 的大概结构如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 相册</span><br><span class="line"><span class="section">type: &quot;picture&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">// 剩下的最好为空，不过问题不大</span><br></pre></td></tr></table></figure><h2 id="脚本">脚本</h2><p>首先贴上完整脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">path2 = path[path.rfind(<span class="string">&quot;source&quot;</span>)+<span class="number">6</span>:]</span><br><span class="line"></span><br><span class="line">os.chdir(path+<span class="string">&quot;\images&quot;</span>)</span><br><span class="line">ls_file = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir():</span><br><span class="line">    <span class="keyword">if</span> file.is_file():</span><br><span class="line">        ls_file.append(file.name)</span><br><span class="line"></span><br><span class="line">md_text = <span class="string">&quot;\n&#123;% gallery %&#125;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> ls_file:</span><br><span class="line">    md_path = <span class="string">&quot;![&quot;</span>+os.path.splitext(image)[<span class="number">0</span>]+<span class="string">&quot;](&quot;</span>+<span class="built_in">str</span>(path2)+<span class="string">&quot;\\&quot;</span>+image+<span class="string">&quot;)&quot;</span></span><br><span class="line">    md_text += md_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">md_text += <span class="string">&quot;&#123;% endgallery %&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.md&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(md_text)</span><br></pre></td></tr></table></figure><ul><li>仅适用于 Windows 系统，如果是 Linux 要做出微小修改。</li><li>使用前需要清除之前生成的相册格式</li></ul><p>将此脚本保存到和 <code>index.md</code> 同级目录，然后定位到该目录执行 <code>python &lt;你保存的文件名&gt;.py</code> 即可使用。</p><h2 id="解析">解析</h2><p>下面我来解析一下这个脚本，<s>轻喷，我两天前才玩的 Python</s></p><h3 id="导入模块">导入模块</h3><p>首先使用 <code>import os</code> 导入 os 模块</p><h3 id="获取路径">获取路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">path2 = path[path.rfind(<span class="string">&quot;source&quot;</span>)+<span class="number">6</span>:]</span><br></pre></td></tr></table></figure><p>获取脚本所在位置的绝对路径保存在 <code>path</code>，使用 <code>rfind()</code> 函数从右往左找到第一个 <code>source</code> 字符<s>如果你后面也有自己起这个名字的文件夹我就没办法了</s>，然后使用分片截取 <code>source\</code> 后的路径保存在 <code>path2</code>。</p><h3 id="遍历文件名">遍历文件名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(path+<span class="string">&quot;\images&quot;</span>)</span><br><span class="line">ls_file = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir():</span><br><span class="line">    <span class="keyword">if</span> file.is_file():</span><br><span class="line">        ls_file.append(file.name)</span><br></pre></td></tr></table></figure><p>使用 <code>chdir()</code> 切换工作目录到当前目录下的 <code>images</code> 目录，也就是放图片的目录，以便获取图片，然后遍历目录下的所有文件名称保存在 <code>ls_file</code> 中。</p><h3 id="处理格式">处理格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">md_text = <span class="string">&quot;\n&#123;% gallery %&#125;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> ls_file:</span><br><span class="line">    md_path = <span class="string">&quot;![&quot;</span>+os.path.splitext(image)[<span class="number">0</span>]+<span class="string">&quot;](&quot;</span>+<span class="built_in">str</span>(path2)+<span class="string">&quot;\\&quot;</span>+image+<span class="string">&quot;)&quot;</span></span><br><span class="line">    md_text += md_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">md_text += <span class="string">&quot;&#123;% endgallery %&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们已经获取好了所有文件名，并且得到了 <code>path2</code>——<code>从 source 到当前位置的相对路径</code>。</p><p>接着在第 1 行和第 7 行声明了相册的基本格式，第 3 行到第 5 行使用循环处理好了 MarkDown 图片格式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">描述</span>](<span class="link">链接/路径</span>)</span><br></pre></td></tr></table></figure><p>这是 MarkDown 图片格式，所以我们要把去掉后缀的文件名放到 <code>描述</code> 中，把图片的相对路径放到 <code>链接/路径</code> 中。</p><p>用 <code>os.path.splitext(filename)</code> 就可以轻松分开文件名和后缀，由于我们只需要文件名所以使用 <code>os.path.splitext(image)[0]</code>，这里已经传入了文件名。</p><p>然后使用 <code>str()</code> 把相对路径 <code>path2</code> 转化为字符串并且加上图片的文件名。</p><p>最后整理好格式，使用 <code>+</code> 将各部分连接好，并且使用 <code>replace()</code> 替换所有的 <code>\</code> 为<code>/</code> 就成型了。</p><h3 id="写入文件">写入文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.md&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(md_text)</span><br></pre></td></tr></table></figure><p>上一步已经把处理好的相册格式存放在 <code>md_text</code> 中,紧接着使用 <code>chdir()</code> 切换到脚本所在目录，这里有 <code>index.md</code> 以便我们写入。</p><p><code>with open(filename) as file:</code> 这是固定格式，不必多讲，不过一定要注意使用 <code>'a'</code> 切换到追加模式，以免丢失原来的模板；使用 <code>encoding='utf-8'</code> 指定编码，以免写入中文时乱码。</p><h2 id="懒是人类进步阶梯">懒是人类进步阶梯</h2><p>这是我用 Python 写的第一个玩意儿，主要是每次都要手动加好麻烦，我就想能不能用 Python 写一个脚本处理。学了两天，写的不是很好，比如不能自动识别原来已有的格式进行替换，每次都要手动去清除，又或者得手动执行，不能在 Hexo 部署的时候进行执行。</p>]]></content>
    
    
    <summary type="html">懒是进步的唯一动力！</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Python" scheme="https://blog.imyan.ren/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 服务器上使用 酷Q</title>
    <link href="https://blog.imyan.ren/posts/2bdd4eaf/"/>
    <id>https://blog.imyan.ren/posts/2bdd4eaf/</id>
    <published>2019-11-17T12:08:29.000Z</published>
    <updated>2023-01-09T05:44:09.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>众所周知 酷Q 是 Windows 平台下的， Linux 下要使用还是有难度的，好在官方做出了了 docker 镜像，这样就可以在 docker 直接运行了</p><h2 id="准备">准备</h2><ul><li>一台 Linux 服务器 (这里用来演示的系统是 CentOS 7.6 当然其他系统也ok)</li><li>docker</li><li>酷Q 容器</li></ul><h2 id="安装及运行-docker">安装及运行 docker</h2><p>在 CentOS 下直接使用 yum 安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker</span><br></pre></td></tr></table></figure><p>安装之后如果提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</span><br></pre></td></tr></table></figure><p>这是因为 docker 还没有在运行</p><p>sudo 运行一下 docker 就正常了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="3-下载-酷Q-镜像，后台运行容器">3. 下载 酷Q 镜像，后台运行容器</h3><p>使用下面的命令获取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull coolq/wine-coolq</span><br></pre></td></tr></table></figure><p>这个速度取决于你的服务器带宽</p><p>创建一个用于存放（映射）coolq 数据的目录（可以理解为数据卷？），用于持久化存放 coolq（酷Q应用）的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /coolq-data</span><br></pre></td></tr></table></figure><p>这一步很重要，因为数据是最重要的，而且后面你的酷Q应用都要上传到此目录才能应用上的</p><p>后台运行 coolq 容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name=coolq -d -p 8080:9000 -v /coolq-data:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=1000000000 coolq/wine-coolq</span><br></pre></td></tr></table></figure><p>其中部分参数根据自己的需求替换：</p><p>远程监听端口<code>8080(9000映射成8080)</code>数据存放位置<code>/coolq-data（/home/user/coolq 映射到/coolq-data）</code>远程访问密码<code>12345678（只能设8位）</code>机器人 QQ 帐号<code>1000000000</code></p><p>实际上我当然运行的参数不是上面那些示例参数，根据自己的服务器实际来</p><p>这里要注意的是，首先你远程监听的端口，也就是自定义的web端口需要在服务器防火墙和云安全组都放行</p><p>其次，-d 指的是后台运行容器，-v后面接的就是将服务器的自己定义的酷Q数据目录映射到容器内的/home/user/coolq目录，-e是设置容器的系统环境</p><p>因为我们后面要通过vnc连接，所以要指定VNC_PASSWD</p><p>而酷Q要登录的qq小号（充当机器人）也可以通过-e COOLQ_ACCOUNT 去指定</p><h3 id="4-通过浏览器登录-vnc-进行使用">4. 通过浏览器登录 vnc 进行使用</h3><p>现在用浏览器打开 <a href="http://xn--ip-0p3cm89l:8080">http://你的ip:8080</a> 就可以看到 vnc 界面了，点击<code>链接</code>然后输入密码就可以看到桌面了，里面已经运行了 coolq air</p><p>可以看到使用 docker 还是很方便的，之前只用 wine 总是出现字体丢失的问题</p>]]></content>
    
    
    <summary type="html">一个简简单单的 docker 网上居然有这么多不同的用法？</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="酷Q" scheme="https://blog.imyan.ren/tags/%E9%85%B7Q/"/>
    
    <category term="linux" scheme="https://blog.imyan.ren/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git 无法 Pull 仓库 显示 refusing to merge unrelated histories （拒绝合并不相关仓库）</title>
    <link href="https://blog.imyan.ren/posts/e5477819/"/>
    <id>https://blog.imyan.ren/posts/e5477819/</id>
    <published>2019-10-19T14:54:36.000Z</published>
    <updated>2023-01-09T05:44:09.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>如果在合并 pull 仓库的时候，出现的问题如何去解决（这个方法适用于合并本地很久没有提交的仓库，或者是同一个仓库 commit 信息不同的合并）</p><p><img src="../../media/article_img/git_connot_pull_repo/fail.png" alt="示意图"></p><p>如果合并了两个不同的开始提交的仓库，在新的 <code>git</code> 会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是就给下面的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><p>如我在 GitHub 新建一个仓库，写了 License，然后把本地一个写了很久仓库上传。这时会发现 GitHub 的仓库和本地的没有一个共同的 <code>commit</code> 所以 <code>git</code> 不让提交，认为是写错了 <code>origin</code> ，如果开发者确定是这个 <code>origin</code> 就可以使用  <code>--allow-unrelated-histories</code>  告诉 <code>git</code> 自己确定</p><p>遇到无法提交的问题，一般先 Pull 也就是使用  <code>git pull origin master</code>  这里的 <code>origin</code> 就是仓库，而 <code>master</code> 就是需要上传的分支，因为两个仓库不同，发现 <code>git</code> 输出  <code>refusing to merge unrelated histories</code>  无法 <code>pull</code> 内容</p><p>因为他们是两个不同的项目，要把两个不同的项目合并，Git需要添加一句代码，在 <code>git pull</code> 之后，这句代码是在 <code>Git 2.9.2</code> 版本发生的，最新的版本需要添加 <code>--allow-unrelated-histories</code> 告诉 <code>git</code> 允许不相关历史合并</p><p>假如我们的源是 <code>origin</code>，分支是 <code>master</code>，那么我们需要这样写 <code>git pull origin master --allow-unrelated-histories</code>  如果有设置了默认上传分支就可以用下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">糟糕！我的仓库不能正常用了！</summary>
    
    
    
    <category term="技术记录" scheme="https://blog.imyan.ren/categories/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Git" scheme="https://blog.imyan.ren/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Kirby Assistant 2.x.x更新日志</title>
    <link href="https://blog.imyan.ren/posts/417dae5e/"/>
    <id>https://blog.imyan.ren/posts/417dae5e/</id>
    <published>2019-09-10T04:51:28.000Z</published>
    <updated>2023-01-09T05:44:09.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>目前最新版本 v2.0.6 (56)</p><h2 id="v2-0-6-56">v2.0.6 (56)</h2><p>紧急修复了高版本无法安装的问题，并且移除的权限，很是抱歉</p><h2 id="v2-0-5-55">v2.0.5 (55)</h2><p>1.修改部分样式贴近规范2.修改下载游戏时的对话框样式</p><h2 id="v2-0-4-54">v2.0.4 (54)</h2><p>1.修复个别主题下输入框颜色不正常的问题2.排除了一个引起闪退的 bug3.新增一个配色</p><h2 id="v2-0-3-53">v2.0.3 (53)</h2><p>1.修复部分黑暗模式与白色模式下的UI问题2.修复UI漂移的问题</p><h2 id="v2-0-2-52">v2.0.2 (52)</h2><p>1.修正夜间模式下设置显示异常2.修复闲聊显示异常问题3.修复无法清除图片缓存4.修复更新检测异常5.重新优化的主题</p><h2 id="v2-0-1-51">v2.0.1 (51)</h2><p>1.自动根据 AndroidQ 夜间模式选项切换夜间模式2.翻译文本修正3.图片资源修复</p><h2 id="v2-0-0-50">v2.0.0 (50)</h2><p>1.全新 API 重新编写2.大部分 MD2 特性3.修复底栏切换过快崩溃的 Bug4.新增黑暗模式5.假装无缝切换主题6.优化用户信息修改后刷新操作7.优化菜单显示方式8.防止未登录情况下进入闲聊的问题9.重新优化的对话框10.应用内清除缓存11.重写头像裁剪12.上传逻辑13.全新官网</p>]]></content>
    
    
    <summary type="html">又一个更新日志。</summary>
    
    
    
    <category term="我的 Android 应用" scheme="https://blog.imyan.ren/categories/%E6%88%91%E7%9A%84-Android-%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Kirby Assistant" scheme="https://blog.imyan.ren/tags/Kirby-Assistant/"/>
    
    <category term="更新日志" scheme="https://blog.imyan.ren/tags/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>动态替换 ViewPager 里面的 Fragment</title>
    <link href="https://blog.imyan.ren/posts/6b0c894/"/>
    <id>https://blog.imyan.ren/posts/6b0c894/</id>
    <published>2019-08-17T05:40:28.000Z</published>
    <updated>2023-01-09T05:44:09.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近在重写 Kirby Assistant 过程中又遇到了需要动态替换 ViewPager 的某个 Fragment 的需求，因为之前的是直接在同一个布局里暴力替换的，但是这次因为是用其他方法实现的，当然不能用以前的方法了，摸索了一段时间后终于搞定了，现在把可以用的方法放在下面</p><h3 id="准备过程">准备过程</h3><p>首先需要在布局中添加 ViewPager</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/main_fragment_viewpager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后给 ViewPager 写一个 ViewPagerAdapter 并且继承自 FragmentPagerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentPagerAdapter</span> &#123;</span><br><span class="line"><span class="comment">//其他东西</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写-ViewPagerAdapter">重写 ViewPagerAdapter</h3><p>具体看代码的注释，有注释的都是需要注意的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentPagerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FragmentManager fm;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragments;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; page_title;<span class="comment">//这个是对应碎片的标题，可以不需要</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewPagerAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragments,List&lt;String&gt; page_title)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(fm);</span><br><span class="line">        <span class="built_in">this</span>.fm=fm;</span><br><span class="line">        <span class="built_in">this</span>.fragments=fragments;</span><br><span class="line">        <span class="built_in">this</span>.page_title=page_title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这个方法，这个是配置你在哪个碎片上进行替换</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">instantiateItem</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup container, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">//这里的判断说明的是在三个和第四个碎片上替换</span></span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">2</span>||position == <span class="number">3</span>)</span><br><span class="line">            removeFragment(container,position);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.instantiateItem(container, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法就是通过 Tag 来判断碎片是不是原来的，如果不是就进行替换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeFragment</span><span class="params">(ViewGroup container,<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> getFragmentTag(container.getId(), index);</span><br><span class="line">        <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> fm.findFragmentByTag(tag);</span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">FragmentTransaction</span> <span class="variable">ft</span> <span class="operator">=</span> fm.beginTransaction();</span><br><span class="line">        ft.remove(fragment);</span><br><span class="line">        ft.commit();</span><br><span class="line">        ft = <span class="literal">null</span>;</span><br><span class="line">        fm.executePendingTransactions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意写成这样才可以进行刷新</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemPosition</span><span class="params">(<span class="meta">@NonNull</span> Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PagerAdapter.POSITION_NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CharSequence <span class="title function_">getPageTitle</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> page_title.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止销毁view达到复用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyItem</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup container, <span class="type">int</span> position, <span class="meta">@NonNull</span> Object object)</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//获取碎片的tag</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFragmentTag</span><span class="params">(<span class="type">int</span> viewId, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;FragmentPagerAdapter&gt; cls = FragmentPagerAdapter.class;</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = &#123; <span class="type">int</span>.class, <span class="type">long</span>.class &#125;;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;makeFragmentName&quot;</span>,</span><br><span class="line">                    parameterTypes);</span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> (String) method.invoke(<span class="built_in">this</span>, viewId, index);</span><br><span class="line">            <span class="keyword">return</span> tag;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意问题">注意问题</h3><p>如果出现替换后出现某个碎片的布局空白了，那就设置一个 ViewPager 的缓存属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_fragment_viewpager.setOffscreenPageLimit(<span class="number">4</span>);<span class="comment">//4代表缓存4页，根据实际情况调整</span></span><br></pre></td></tr></table></figure><h3 id="结尾">结尾</h3><p>如果有代码什么问题可以向我提出</p>]]></content>
    
    
    <summary type="html">暴力替换不可取哦~</summary>
    
    
    
    <category term="编程" scheme="https://blog.imyan.ren/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="踩坑" scheme="https://blog.imyan.ren/tags/%E8%B8%A9%E5%9D%91/"/>
    
    <category term="Android" scheme="https://blog.imyan.ren/tags/Android/"/>
    
    <category term="ViewPager" scheme="https://blog.imyan.ren/tags/ViewPager/"/>
    
    <category term="Fragment" scheme="https://blog.imyan.ren/tags/Fragment/"/>
    
  </entry>
  
</feed>
